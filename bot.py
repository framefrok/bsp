# bot.py
import os
import logging
import threading
import asyncio
from datetime import datetime
from dotenv import load_dotenv

import telebot
from telebot import types
from telebot.apihelper import ApiTelegramException

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç—Å—è —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
try:
    import database
except Exception as e:
    raise ImportError(f"–ú–æ–¥—É–ª—å database –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")

try:
    import users
except Exception as e:
    raise ImportError(f"–ú–æ–¥—É–ª—å users –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")

try:
    import market
except Exception as e:
    raise ImportError(f"–ú–æ–¥—É–ª—å market –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")

try:
    import alerts
except Exception as e:
    raise ImportError(f"–ú–æ–¥—É–ª—å alerts –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")


# logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("market_bot")

# load token
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –î–æ–±–∞–≤—å—Ç–µ –≤ .env: BOT_TOKEN=...")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ---
def init_app():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–µ—Å–ª–∏ –µ—Å—Ç—å init_db)
    if hasattr(database, "init_db"):
        try:
            database.init_db()
            logger.info("Database initialized.")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    else:
        logger.warning("database.init_db –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ë–î —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á alerts
    try:
        if hasattr(alerts, "start_background_tasks"):
            alerts.start_background_tasks(bot)
            logger.info("Started alerts background tasks.")
        else:
            logger.warning("alerts.start_background_tasks –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã.")
    except Exception as e:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏ alerts: {e}")


# --- Changelog –¥–ª—è /history bot ---
CHANGELOG = [
    "v1.0 ‚Äî –°—Ç–∞—Ä—Ç –±–æ—Ç–∞, –ø–∞—Ä—Å–∏–Ω–≥ —Ä—ã–Ω–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.",
    "v1.1 ‚Äî –¢–∞–π–º–µ—Ä—ã –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.",
    "v1.2 ‚Äî –£—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ (—è–∫–æ—Ä—å + —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏).",
    "v1.3 ‚Äî Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–∞–º–∏.",
    "v1.4 ‚Äî –ê–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ –±–∞–∑—ã –∏ –∞–ª–µ—Ä—Ç—ã –ø–æ –æ–±—ä—ë–º—É.",
]


# ----------------------------
# –ö–æ–º–∞–Ω–¥—ã
# ----------------------------
@bot.message_handler(commands=["start"])
def cmd_start(message):
    uid = message.from_user.id
    # ensure user exists (if module supports)
    try:
        if hasattr(users, "ensure_user"):
            users.ensure_user(uid, getattr(message.from_user, "username", None))
    except Exception:
        logger.debug("ensure_user failed or absent.")
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/push ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n"
        "/timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–Ω–∞> ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–Ω—É—Å—ã (—è–∫–æ—Ä—å/—É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏)\n"
        "/stat ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã\n"
        "/history <—Ä–µ—Å—É—Ä—Å>|bot ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ —Ä–µ—Å—É—Ä—Å—É –∏–ª–∏ changelog –±–æ—Ç–∞\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )
    bot.reply_to(message, text)


@bot.message_handler(commands=["help"])
def cmd_help(message):
    bot.reply_to(message,
                 "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                 "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ (—Å —ç–º–æ–¥–∑–∏ üé™) ‚Äî –±–æ—Ç —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ (—Å—ã—Ä—ã–µ) —Ü–µ–Ω—ã.\n"
                 "‚Ä¢ /push ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ–∫ + –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–ª–∏—á–Ω—ã–µ/—á–∞—Ç, –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∑–∞–∫—Ä–µ–ø—ã).\n"
                 "‚Ä¢ /timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–ª—å> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n"
                 "‚Ä¢ /stat ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (—ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è).\n"
                 "‚Ä¢ /history <—Ä–µ—Å—É—Ä—Å> ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ —Ä–µ—Å—É—Ä—Å—É; /history bot ‚Äî changelog.\n")


# ----------------------------
# /settings ‚Äî —è–∫–æ—Ä—å –∏ —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏ (flow)
# ----------------------------
STATE_SETTINGS_ANCHOR = "settings_anchor"
STATE_SETTINGS_TRADE_LEVEL = "settings_trade_level"
_user_states = {}   # user_id -> state
_user_tmp = {}      # user_id -> temporary data


@bot.message_handler(commands=["settings"])
def cmd_settings(message):
    uid = message.from_user.id
    _user_states[uid] = STATE_SETTINGS_ANCHOR
    _user_tmp[uid] = {}
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –ï—Å—Ç—å –Ø–∫–æ—Ä—å (+2%)", callback_data="anchor_yes"))
    kb.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç —è–∫–æ—Ä—è", callback_data="anchor_no"))
    bot.reply_to(message, "‚öìÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ø–∫–æ—Ä—å (–¥–∞—ë—Ç +2%)?", reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data.startswith("anchor_"))
def cb_anchor(call):
    uid = call.from_user.id
    if _user_states.get(uid) != STATE_SETTINGS_ANCHOR:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
        return
    bot.answer_callback_query(call.id)
    has_anchor = call.data == "anchor_yes"
    _user_tmp[uid]["has_anchor"] = has_anchor
    _user_states[uid] = STATE_SETTINGS_TRADE_LEVEL
    bot.send_message(uid, "‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è '–û—Å–Ω–æ–≤—ã —Ç–æ—Ä–≥–æ–≤–ª–∏' (0-10):")


@bot.message_handler(func=lambda m: _user_states.get(m.from_user.id) == STATE_SETTINGS_TRADE_LEVEL)
def msg_trade_level(message):
    uid = message.from_user.id
    try:
        lvl = int(message.text.strip())
        if lvl < 0 or lvl > 10:
            bot.reply_to(message, "‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0..10.")
            return
    except Exception:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0..10.")
        return

    has_anchor = _user_tmp.get(uid, {}).get("has_anchor", False)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ users (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è)
    try:
        if hasattr(users, "save_user_settings"):
            users.save_user_settings(uid, has_anchor, lvl)
        elif hasattr(database, "upsert_user_settings"):
            database.upsert_user_settings(uid, bool(has_anchor), int(lvl))
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bonus = users.get_user_bonus(uid)
        bonus_text = f"{bonus*100:.0f}%" if bonus else "0%"
    except Exception:
        bonus_text = "‚Äî"

    bot.reply_to(message, f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–Ø–∫–æ—Ä—å: {'‚úÖ' if has_anchor else '‚ùå'}\n–£—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {lvl}\n–í—ã–≥–æ–¥–∞: {bonus_text}")

    _user_states.pop(uid, None)
    _user_tmp.pop(uid, None)


# ----------------------------
# /push ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
# ----------------------------
def _build_push_keyboard(user_id: int, chat_id: int):
    kb = types.InlineKeyboardMarkup(row_width=1)

    # –õ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    personal = {"notify_personal": 1, "notify_interval": 15}
    try:
        if hasattr(users, "get_user_notification_settings"):
            personal = users.get_user_notification_settings(user_id)
    except Exception:
        logger.debug("users.get_user_notification_settings –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    personal_on = bool(personal.get("notify_personal", 1))
    personal_interval = int(personal.get("notify_interval", 15))
    kb.add(types.InlineKeyboardButton(f"üîî –õ–∏—á–Ω—ã–µ: {'–í–ö–õ' if personal_on else '–í–´–ö–õ'}", callback_data="toggle_personal"))
    kb.add(types.InlineKeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª (–ª–∏—á–Ω–æ): {personal_interval} –º–∏–Ω", callback_data="choose_personal_interval"))

    # –ß–∞—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞)
    if chat_id is not None:
        chat_cfg = {"notify_chat": 0, "notify_interval": 15, "pinned_message_id": None}
        try:
            if hasattr(database, "get_chat_settings"):
                chat_cfg = database.get_chat_settings(chat_id)
        except Exception:
            logger.debug("database.get_chat_settings –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        chat_on = bool(chat_cfg.get("notify_chat", 0))
        chat_interval = int(chat_cfg.get("notify_interval", 15))
        kb.add(types.InlineKeyboardButton(f"üí¨ –ß–∞—Ç: {'–í–ö–õ' if chat_on else '–í–´–ö–õ'}", callback_data=f"toggle_chat:{chat_id}"))
        kb.add(types.InlineKeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª (—á–∞—Ç): {chat_interval} –º–∏–Ω", callback_data=f"choose_chat_interval:{chat_id}"))
        kb.add(types.InlineKeyboardButton("üìå –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ", callback_data=f"toggle_pin_chat:{chat_id}"))
        kb.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫—Ä–µ–ø—ã", callback_data=f"clear_chat_pins:{chat_id}"))

    return kb


@bot.message_handler(commands=["push"])
def cmd_push(message):
    uid = message.from_user.id
    chat_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä—ã–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è)
    latest_list = []
    try:
        if hasattr(database, "get_all_latest"):
            latest_list = database.get_all_latest()
    except Exception:
        logger.debug("database.get_all_latest –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    if not latest_list:
        bot.reply_to(message, "‚ö†Ô∏è –†—ã–Ω–æ–∫ –ø—É—Å—Ç ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –ø–µ—Ä–µ—Å—ã–ª–∫—É (—Ñ–æ—Ä–≤–∞—Ä–¥) —Å —Ä—ã–Ω–∫–æ–º.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á—ë—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lines = ["üìä <b>–¢–µ–∫—É—â–∏–π —Ä—ã–Ω–æ–∫ (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –≤–∞—Å):</b>"]
    for rec in latest_list:
        resource = rec.get("resource", "resource")
        raw_buy = rec.get("buy", 0.0)
        raw_sell = rec.get("sell", 0.0)
        try:
            adj_buy, adj_sell = users.adjust_prices_for_user(uid, raw_buy, raw_sell)
        except Exception:
            # fallback: assume function adjust_prices_for_user takes (user_id, buy, sell)
            try:
                adj_buy, adj_sell = users.adjust_prices_for_user(uid, raw_buy, raw_sell)
            except Exception:
                adj_buy, adj_sell = raw_buy, raw_sell
        lines.append(f"{resource}: –ö—É–ø–∏—Ç—å {adj_buy:.3f} / –ü—Ä–æ–¥–∞—Ç—å {adj_sell:.3f}")

    text = "\n".join(lines)
    try:
        sent = bot.send_message(chat_id, text, parse_mode="HTML")
    except ApiTelegramException as api_e:
        # Telegram API error - if conflict (409) -> give clear instruction and stop
        if getattr(api_e, "result_json", {}).get("error_code") == 409 or "409" in str(api_e):
            logger.error("–û—à–∏–±–∫–∞ 409 Conflict: –≤–µ—Ä–æ—è—Ç–Ω–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.")
            raise SystemExit("409 Conflict: –ó–∞–≤–µ—Ä—à–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /push —Å–æ–æ–±—â–µ–Ω–∏—è")
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    kb = _build_push_keyboard(uid, chat_id if message.chat.type in ['group', 'supergroup'] else None)
    bot.send_message(uid, "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=kb)


# --- callbacks: personal toggles / intervals ---
@bot.callback_query_handler(func=lambda c: c.data == "toggle_personal")
def cb_toggle_personal(call):
    uid = call.from_user.id
    bot.answer_callback_query(call.id)
    try:
        cur = users.get_user_notification_settings(uid)
        new_state = 0 if cur.get("notify_personal", 1) == 1 else 1
        users.set_user_notification(uid, bool(new_state), cur.get("notify_interval", 15))
        bot.send_message(uid, f"üîî –õ–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ª–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        bot.send_message(uid, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


@bot.callback_query_handler(func=lambda c: c.data == "choose_personal_interval")
def cb_choose_personal_interval(call):
    uid = call.from_user.id
    bot.answer_callback_query(call.id)
    kb = types.InlineKeyboardMarkup(row_width=4)
    for m in (5, 15, 30, 60):
        kb.add(types.InlineKeyboardButton(f"{m} –º–∏–Ω", callback_data=f"set_personal_interval:{m}"))
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–ª–∏—á–Ω–æ):", reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data.startswith("set_personal_interval:"))
def cb_set_personal_interval(call):
    uid = call.from_user.id
    bot.answer_callback_query(call.id)
    try:
        _, m = call.data.split(":", 1)
        m = int(m)
        cur = users.get_user_notification_settings(uid)
        users.set_user_notification(uid, bool(cur.get("notify_personal", 1)), m)
        bot.send_message(uid, f"‚è± –õ–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {m} –º–∏–Ω.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        bot.send_message(uid, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª.")


# --- callbacks: chat toggles / intervals / pin management ---
@bot.callback_query_handler(func=lambda c: c.data.startswith("toggle_chat:"))
def cb_toggle_chat(call):
    bot.answer_callback_query(call.id)
    try:
        _, chat_id_str = call.data.split(":", 1)
        chat_id = int(chat_id_str)
        cfg = database.get_chat_settings(chat_id)
        new_state = 0 if cfg.get("notify_chat", 0) == 1 else 1
        database.upsert_chat_settings(chat_id, bool(new_state), cfg.get("notify_interval", 15), cfg.get("pinned_message_id"))
        bot.send_message(call.from_user.id, f"üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {'–≤–∫–ª—é—á–µ–Ω—ã' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ toggle_chat")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞.")


@bot.callback_query_handler(func=lambda c: c.data.startswith("choose_chat_interval:"))
def cb_choose_chat_interval(call):
    bot.answer_callback_query(call.id)
    try:
        _, chat_id_str = call.data.split(":", 1)
        chat_id = int(chat_id_str)
        kb = types.InlineKeyboardMarkup(row_width=4)
        for m in (5, 15, 30, 60):
            kb.add(types.InlineKeyboardButton(f"{m} –º–∏–Ω", callback_data=f"set_chat_interval:{chat_id}:{m}"))
        bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (—á–∞—Ç):", reply_markup=kb)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ choose_chat_interval")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")


@bot.callback_query_handler(func=lambda c: c.data.startswith("set_chat_interval:"))
def cb_set_chat_interval(call):
    bot.answer_callback_query(call.id)
    try:
        _, chat_id_str, m_str = call.data.split(":", 2)
        chat_id = int(chat_id_str)
        m = int(m_str)
        cfg = database.get_chat_settings(chat_id)
        database.upsert_chat_settings(chat_id, cfg.get("notify_chat", 1), m, cfg.get("pinned_message_id"))
        bot.send_message(call.from_user.id, f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {m} –º–∏–Ω.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ set_chat_interval")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")


@bot.callback_query_handler(func=lambda c: c.data.startswith("toggle_pin_chat:"))
def cb_toggle_pin_chat(call):
    bot.answer_callback_query(call.id)
    try:
        _, chat_id_str = call.data.split(":", 1)
        chat_id = int(chat_id_str)
        cfg = database.get_chat_settings(chat_id)
        new_pin = 0 if cfg.get("pinned_message_id") else 1
        # Keep notify_interval and notify_chat as-is
        database.upsert_chat_settings(chat_id, cfg.get("notify_chat", 1), cfg.get("notify_interval", 15), pinned_message_id=cfg.get("pinned_message_id") if new_pin == 0 else None)
        bot.send_message(call.from_user.id, f"üìå –ê–≤—Ç–æ-–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ {'–≤–∫–ª—é—á–µ–Ω–æ' if new_pin else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ toggle_pin_chat")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")


@bot.callback_query_handler(func=lambda c: c.data.startswith("clear_chat_pins:"))
def cb_clear_chat_pins(call):
    bot.answer_callback_query(call.id)
    try:
        _, chat_id_str = call.data.split(":", 1)
        chat_id = int(chat_id_str)
        pinned = database.get_pinned_messages(chat_id)
        for rec in pinned:
            try:
                bot.unpin_chat_message(chat_id, rec["message_id"])
                bot.delete_message(chat_id, rec["message_id"])
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–∞")
            database.delete_pinned_message(rec["id"])
        bot.send_message(call.from_user.id, "üóë –í—Å–µ –∑–∞–∫—Ä–µ–ø—ã —É–¥–∞–ª–µ–Ω—ã.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ clear_chat_pins")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–æ–≤.")


# ----------------------------
# /stat ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è
# ----------------------------
@bot.message_handler(commands=["stat"])
def cmd_stat(message):
    uid = message.from_user.id
    try:
        # —Å–±–æ—Ä –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏)
        total_records = database.get_total_market_records() if hasattr(database, "get_total_market_records") else None
        unique_resources = database.get_unique_resources_count() if hasattr(database, "get_unique_resources_count") else None
        users_count = database.get_users_count() if hasattr(database, "get_users_count") else None
        active_alerts = database.get_active_alerts_count() if hasattr(database, "get_active_alerts_count") else None

        parts = ["<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>"]
        if total_records is not None:
            parts.append(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Ä—ã–Ω–∫–∞: {total_records}")
        if unique_resources is not None:
            parts.append(f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {unique_resources}")
        if users_count is not None:
            parts.append(f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        if active_alerts is not None:
            parts.append(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {active_alerts}")
        parts.append("‚îÄ" * 24)
        parts.append("<b>–¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ü–µ–Ω (—ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è):</b>")

        # get latest resources
        latest_list = database.get_all_latest() if hasattr(database, "get_all_latest") else []
        if not latest_list:
            parts.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä—ã–Ω–∫—É.")
            bot.reply_to(message, "\n".join(parts), parse_mode="HTML")
            return

        for rec in latest_list:
            resource = rec.get("resource", "res")
            pred_buy, pred_sell, trend, speed_adj, last_ts = market.compute_extrapolated_price(resource, uid, lookback_minutes=60)
            qty_week = database.get_week_max_qty(resource) if hasattr(database, "get_week_max_qty") else rec.get("quantity", 0)
            last_time = datetime.fromtimestamp(last_ts).strftime("%d.%m %H:%M") if last_ts else "‚Äî"
            trend_icon = "üìà" if trend == "up" else "üìâ" if trend == "down" else "‚û°Ô∏è"
            speed_text = f"{speed_adj:+.4f}/–º–∏–Ω" if speed_adj is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            parts.append(
                f"{resource} ‚Äî {trend_icon} {trend}\n"
                f"  ~–ö—É–ø–∏—Ç—å: {pred_buy:.3f if pred_buy is not None else '‚Äî'} / ~–ü—Ä–æ–¥–∞—Ç—å: {pred_sell:.3f if pred_sell is not None else '‚Äî'}\n"
                f"  –ü–æ—Å–ª–µ–¥–Ω—è—è: {last_time} | –°–∫–æ—Ä–æ—Å—Ç—å: {speed_text}\n"
                f"  –ú–∞–∫—Å. –æ–±—ä—ë–º –∑–∞ –Ω–µ–¥–µ–ª—é: {qty_week}"
            )

        bot.reply_to(message, "\n\n".join(parts), parse_mode="HTML")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /stat")
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")


# ----------------------------
# /history
# ----------------------------
@bot.message_handler(commands=["history"])
def cmd_history(message):
    try:
        parts = message.text.split()[1:] if len(message.text.split()) > 1 else []
        if not parts:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/history <—Ä–µ—Å—É—Ä—Å> ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ —Ä–µ—Å—É—Ä—Å—É\n/history bot ‚Äî changelog")
            return
        arg = parts[0].lower()
        if arg in ("bot", "updates", "changelog"):
            text = "<b>üìú Changelog:</b>\n" + "\n".join(f"‚Ä¢ {l}" for l in CHANGELOG)
            bot.reply_to(message, text, parse_mode="HTML")
            return
        resource = parts[0].capitalize()
        if hasattr(database, "get_market_history"):
            recs = database.get_market_history(resource, limit=50)
        else:
            recs = []
        if not recs:
            bot.reply_to(message, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {resource}.")
            return
        lines = [f"üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ {resource} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(recs)}):"]
        for r in recs:
            t = datetime.fromtimestamp(r["timestamp"]).strftime("%d.%m %H:%M")
            try:
                adj_buy, adj_sell = users.adjust_prices_for_user(message.from_user.id, r["buy"], r["sell"])
            except Exception:
                adj_buy, adj_sell = r["buy"], r["sell"]
            lines.append(f"{t} ‚Äî –ö—É–ø–∏—Ç—å: {adj_buy:.3f} / –ü—Ä–æ–¥–∞—Ç—å: {adj_sell:.3f} (qty: {r.get('quantity', 0)})")
        bot.reply_to(message, "\n".join(lines))
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /history")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")


# ----------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–≤–∞—Ä–¥–∞ —Ä—ã–Ω–∫–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
# ----------------------------
@bot.message_handler(func=lambda msg: isinstance(getattr(msg, "text", None), str) and "üé™" in msg.text)
def handler_market_forward(message):
    # –¢—Ä–µ–±—É–µ–º, —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ (forward_from –∏–ª–∏ forward_sender_name)
    forward_from = getattr(message, "forward_from", None)
    forward_sender_name = getattr(message, "forward_sender_name", None)
    if not forward_from and not forward_sender_name:
        # –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    try:
        market.handle_market_forward(bot, message)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞")
        try:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞.")
        except Exception:
            pass


# ----------------------------
# /timer -> –¥–µ–ª–µ–≥–∏—Ä—É–µ–º alerts
# ----------------------------
@bot.message_handler(commands=["timer"])
def cmd_timer(message):
    try:
        if hasattr(alerts, "cmd_timer_handler"):
            alerts.cmd_timer_handler(bot, message)
        else:
            bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ /timer –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /timer")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞.")


# ----------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ----------------------------
def start_polling():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç ApiTelegramException 409 ‚Äî –≤—ã—Ö–æ–¥–∏–º —Å –ø–æ–Ω—è—Ç–Ω—ã–º –ª–æ–≥–æ–º
        try:
            bot.infinity_polling(skip_pending=True, timeout=20)
        except ApiTelegramException as api_e:
            # 409 Conflict -> –≤–µ—Ä–æ—è—Ç–µ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            if "409" in str(api_e) or (hasattr(api_e, "result_json") and api_e.result_json.get("error_code") == 409):
                logger.error("ApiTelegramException 409: –∫–æ–Ω—Ñ–ª–∏–∫—Ç getUpdates. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.")
                raise SystemExit("409 Conflict: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                raise
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ Ctrl+C")
    except SystemExit as sx:
        logger.error(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {sx}")
        raise
    except Exception:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ polling")


if __name__ == "__main__":
    init_app()

    # –ó–∞–ø—É—Å–∫ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ‚Äî —á—Ç–æ–±—ã event loop/background tasks –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
    polling_thread = threading.Thread(target=start_polling, daemon=True)
    polling_thread.start()

    # –ï—Å–ª–∏ alerts –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
    # –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ alerts.start_background_tasks —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª –ø–æ—Ç–æ–∫–∏.
    try:
        if hasattr(alerts, "start_background_tasks"):
            # –µ—Å–ª–∏ start_background_tasks –Ω–µ –≤—ã–∑–≤–∞–Ω –≤ init_app (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –≤—ã–∑–≤–∞–Ω), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å background tasks")

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–µ—Ä–∂–∏–º –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∂–∏–≤—ã–º
    try:
        while True:
            # –º–æ–∂–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å: –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ polling_thread –∂–∏–≤
            if not polling_thread.is_alive():
                logger.error("Polling thread –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –í—ã—Ö–æ–¥.")
                break
            # –¥–∞—ë–º –¥—Ä—É–≥–∏–º –ø–æ—Ç–æ–∫–∞–º –≤—Ä–µ–º—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å
            threading.Event().wait(1)
    except KeyboardInterrupt:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C")
