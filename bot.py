import logging
import threading
from datetime import datetime
import telebot

from database import users_table, alerts_table, market_table
from market import handle_market_forward, get_latest_data, adjust_prices_for_user
from alerts import start_background_tasks
from users import cmd_settings, get_user_bonus

# üîß –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("MarketBot")

# ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = "8289683909:AAGusWjdtuzvBoiFV42-CODErJB0xc1JSEY"
bot = telebot.TeleBot(API_TOKEN, parse_mode="HTML")

# =====================================================
# –ö–æ–º–∞–Ω–¥—ã
# =====================================================

@bot.message_handler(commands=['start'])
def cmd_start(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞.\n"
                          "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "/settings ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–Ω—É—Å—ã\n"
                          "/push ‚Äî –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –≤ —á–∞—Ç–µ\n"
                          "/timer ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n")

@bot.message_handler(commands=['settings'])
def cmd_settings_handler(message):
    cmd_settings(bot, message)

@bot.message_handler(commands=['push'])
def cmd_push(message):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä—ã–Ω–∫–∞ –≤ —á–∞—Ç.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥—Ä—É–ø–ø.
    """
    user_id = message.from_user.id
    bonus = get_user_bonus(user_id)

    resources = market_table.all()
    if not resources:
        bot.reply_to(message, "‚ö†Ô∏è –†—ã–Ω–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Ä—ã–Ω–∫–∞.")
        return

    lines = ["üìä <b>–†—ã–Ω–æ–∫</b>:"]
    for rec in resources:
        res = rec['resource']
        latest = get_latest_data(res)
        if not latest:
            continue
        adj_buy, adj_sell = adjust_prices_for_user(user_id, latest['buy'], latest['sell'])
        lines.append(f"{res}: –ü–æ–∫—É–ø–∫–∞ {adj_buy:.2f} / –ü—Ä–æ–¥–∞–∂–∞ {adj_sell:.2f}")

    text = "\n".join(lines)
    chat_id = message.chat.id

    sent = bot.send_message(chat_id, text)

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type in ['group', 'supergroup']:
        try:
            bot.pin_chat_message(chat_id, sent.message_id, disable_notification=True)
            alerts_table.update({'message_id': sent.message_id}, doc_ids=[rec.doc_id for rec in market_table.all()])
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {chat_id}: {e}")
            bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ. "
                                      "–î–∞–Ω–Ω—ã–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

@bot.message_handler(commands=['timer'])
def cmd_timer(message):
    from alerts import cmd_timer_handler
    cmd_timer_handler(bot, message)

# =====================================================
# –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤ —Ä—ã–Ω–∫–∞
# =====================================================

@bot.message_handler(content_types=['text'])
def handle_forward(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–≤–∞—Ä–¥–∞ —Ä—ã–Ω–∫–∞ (–∏–≥—Ä–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏–≥—Ä—ã).
    """
    if not message.forward_from:
        return

    try:
        user_id = message.from_user.id
        handle_market_forward(bot, message, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞: {e}", exc_info=True)
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ä–≤–∞—Ä–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")

# =====================================================
# –ó–∞–ø—É—Å–∫
# =====================================================

if __name__ == '__main__':
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    start_background_tasks(bot)
    bot.polling(none_stop=True, interval=0, timeout=20)
