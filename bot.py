import logging
import asyncio
import telebot
from telebot import types
from datetime import datetime, timedelta

from database import (
    init_db, get_db,
    save_pinned_message, get_pinned_messages, delete_pinned_message
)
from users import ensure_user, set_user_bonus, adjust_prices_for_user
from alerts import check_alerts_for_user

API_TOKEN = "YOUR_BOT_TOKEN"
bot = telebot.TeleBot(API_TOKEN)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

init_db()


# ======================
# –ö–æ–º–∞–Ω–¥—ã
# ======================

@bot.message_handler(commands=["start"])
def cmd_start(message):
    ensure_user(message.from_user.id)
    bot.reply_to(
        message,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /settings –¥–ª—è –±–æ–Ω—É—Å–æ–≤, /push –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, /stat –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    )


@bot.message_handler(commands=["settings"])
def cmd_settings(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ–Ω—É—Å–æ–≤"""
    ensure_user(message.from_user.id)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ë–æ–Ω—É—Å—ã –ø–æ–∫—É–ø–∫–∏ -1", callback_data="bonus:buy:-1"))
    kb.add(types.InlineKeyboardButton("–ë–æ–Ω—É—Å—ã –ø—Ä–æ–¥–∞–∂–∏ +1", callback_data="bonus:sell:+1"))
    bot.send_message(message.chat.id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤:", reply_markup=kb)


@bot.message_handler(commands=["push"])
def cmd_push(message):
    """–ú–µ–Ω—é –ø—É—à–µ–π"""
    db = get_db()
    c = db.cursor()
    c.execute("INSERT OR IGNORE INTO push_settings (chat_id) VALUES (?)", (message.chat.id,))
    db.commit()

    c.execute("SELECT enabled, interval, pin_messages FROM push_settings WHERE chat_id=?", (message.chat.id,))
    row = c.fetchone()
    enabled, interval, pin = row

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîî –í–∫–ª" if enabled else "üîï –í—ã–∫–ª", callback_data="push:toggle"))
    kb.add(types.InlineKeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω", callback_data="push:interval"))
    kb.add(types.InlineKeyboardButton("üìå –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å" if not pin else "‚ùå –ù–µ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å", callback_data="push:pin"))
    kb.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫—Ä–µ–ø—ã", callback_data="push:clearpins"))

    bot.send_message(message.chat.id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb)


@bot.message_handler(commands=["stat"])
def cmd_stat(message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    db = get_db()
    c = db.cursor()
    c.execute("SELECT buy, sell, resource, amount, timestamp FROM market ORDER BY timestamp DESC LIMIT 1")
    last = c.fetchone()

    if not last:
        bot.reply_to(message, "‚ùå –î–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    user_id = message.from_user.id
    buy, sell = adjust_prices_for_user(user_id, last["buy"], last["sell"])
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"–†–µ—Å—É—Ä—Å: {last['resource']}\n"
        f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {buy}\n"
        f"–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {sell}\n"
        f"–ö–æ–ª-–≤–æ: {last['amount']:,}\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {last['timestamp']}"
    )
    bot.reply_to(message, text)


@bot.message_handler(commands=["history"])
def cmd_history(message):
    """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–æ—Ç–∞"""
    text = (
        "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:\n"
        "v1.0 ‚Äî —Å—Ç–∞—Ä—Ç\n"
        "v1.1 ‚Äî –±–æ–Ω—É—Å—ã\n"
        "v1.2 ‚Äî push + –∑–∞–∫—Ä–µ–ø—ã\n"
        "v1.3 ‚Äî stat/history\n"
        "v1.4 ‚Äî –∞–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–ª–µ—Ä—Ç—ã\n"
    )
    bot.reply_to(message, text)


# ======================
# Callback –æ–±—Ä–∞–±–æ—Ç–∫–∞
# ======================

@bot.callback_query_handler(func=lambda call: call.data.startswith("bonus:"))
def callback_bonus(call):
    parts = call.data.split(":")
    typ, val = parts[1], int(parts[2])
    user_id = call.from_user.id
    db = get_db()
    c = db.cursor()
    c.execute("SELECT buy_bonus, sell_bonus FROM users WHERE id=?", (user_id,))
    row = c.fetchone()
    if row:
        buy_bonus, sell_bonus = row
        if typ == "buy":
            buy_bonus += val
        else:
            sell_bonus += val
        set_user_bonus(user_id, buy_bonus, sell_bonus)
    bot.answer_callback_query(call.id, "–ë–æ–Ω—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("push:"))
def callback_push(call):
    chat_id = call.message.chat.id
    db = get_db()
    c = db.cursor()
    c.execute("SELECT enabled, interval, pin_messages FROM push_settings WHERE chat_id=?", (chat_id,))
    row = c.fetchone()
    enabled, interval, pin = row

    if call.data == "push:toggle":
        enabled = 0 if enabled else 1
        c.execute("UPDATE push_settings SET enabled=? WHERE chat_id=?", (enabled, chat_id))
        bot.answer_callback_query(call.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã")

    elif call.data == "push:interval":
        interval = 30 if interval == 15 else 15
        c.execute("UPDATE push_settings SET interval=? WHERE chat_id=?", (interval, chat_id))
        bot.answer_callback_query(call.id, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω")

    elif call.data == "push:pin":
        pin = 0 if pin else 1
        c.execute("UPDATE push_settings SET pin_messages=? WHERE chat_id=?", (pin, chat_id))
        bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–∫—Ä–µ–ø–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∞")

    elif call.data == "push:clearpins":
        pinned = get_pinned_messages(chat_id)
        for rec in pinned:
            try:
                bot.unpin_chat_message(chat_id, rec["message_id"])
                bot.delete_message(chat_id, rec["message_id"])
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–∞: {e}")
            delete_pinned_message(rec["id"])
        bot.answer_callback_query(call.id, "–í—Å–µ –∑–∞–∫—Ä–µ–ø—ã —É–¥–∞–ª–µ–Ω—ã")

    db.commit()


# ======================
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
# ======================

async def check_market_updates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–∫–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        try:
            db = get_db()
            c = db.cursor()
            c.execute("SELECT buy, sell, resource, amount, timestamp FROM market ORDER BY timestamp DESC LIMIT 1")
            last = c.fetchone()

            if not last:
                await asyncio.sleep(900)
                continue

            ts = datetime.fromisoformat(last["timestamp"])
            now = datetime.utcnow()
            if now - ts > timedelta(minutes=15):
                # —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –ø—É—à–∞–º–∏
                c.execute("SELECT chat_id, pin_messages FROM push_settings WHERE enabled=1")
                for row in c.fetchall():
                    chat_id, pin = row
                    msg = bot.send_message(chat_id, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –†—ã–Ω–æ–∫ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç.")
                    if pin:
                        try:
                            bot.pin_chat_message(chat_id, msg.message_id)
                            save_pinned_message(chat_id, msg.message_id)
                            # —á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –∑–∞–∫—Ä–µ–ø—ã
                            pinned = get_pinned_messages(chat_id)
                            if len(pinned) > 5:
                                oldest = pinned[0]
                                bot.unpin_chat_message(chat_id, oldest["message_id"])
                                bot.delete_message(chat_id, oldest["message_id"])
                                delete_pinned_message(oldest["id"])
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏: {e}")

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã (—Ä–µ—Å—É—Ä—Å—ã >=10M)
            if last["amount"] >= 10_000_000:
                buy, sell = last["buy"], last["sell"]
                resource = last["resource"]
                # –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ buy < sell (—Ä–∞–∑–Ω–∏—Ü–∞ –≤—ã–≥–æ–¥–Ω–∞—è)
                if buy < sell:
                    c.execute("SELECT chat_id FROM push_settings WHERE enabled=1")
                    for row in c.fetchall():
                        chat_id = row["chat_id"]
                        text = f"üî• –ü–æ—Ä–∞ –±—Ä–∞—Ç—å! {resource} –æ–∂–∏–¥–∞–µ—Ç —Ç–≤–æ–µ–π –ø–æ–∫—É–ø–∫–∏.\n@all"
                        bot.send_message(chat_id, text)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

        await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç


# ======================
# –ó–∞–ø—É—Å–∫
# ======================
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    loop = asyncio.get_event_loop()
    loop.create_task(check_market_updates())

    # telebot.polling –±–ª–æ–∫–∏—Ä—É–µ—Ç, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø—É—Å–∫–∞–µ–º –≤ executor
    from threading import Thread

    def polling():
        bot.infinity_polling(skip_pending=True)

    Thread(target=polling, daemon=True).start()
    loop.run_forever()
