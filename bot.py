# bot.py
import logging
import os
import threading
import time
from datetime import datetime

from dotenv import load_dotenv
import telebot
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

import database
import market
import users
import alerts

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("bsp_bot")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
database.init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è /settings
user_states = {}
user_data = {}
STATE_SETTINGS_ANCHOR = "settings_anchor"
STATE_SETTINGS_TRADE_LEVEL = "settings_trade_level"

# Changelog (history of bot updates)
CHANGELOG = [
    "v1.0 ‚Äî –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ø–∞—Ä—Å–∏–Ω–≥ —Ä—ã–Ω–∫–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
    "v1.1 ‚Äî –î–æ–±–∞–≤–ª–µ–Ω—ã –∞–ª–µ—Ä—Ç—ã –∏ —Ç–∞–π–º–µ—Ä—ã, –ø–µ—Ä–µ—Å—á—ë—Ç –ø–æ —Ç—Ä–µ–Ω–¥—É.",
    "v1.2 ‚Äî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–Ω—É—Å–æ–≤ (—è–∫–æ—Ä—å + —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏), –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω.",
    "v1.3 ‚Äî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –±–∞–∑–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.",
    "v1.4 ‚Äî –£–ª—É—á—à–µ–Ω–Ω—ã–π /stat —Å —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏–µ–π —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.",
    # –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∏—Å–∏ –ø–æ –º–µ—Ä–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
]


# -------------------------
# –ö–æ–º–∞–Ω–¥—ã
# -------------------------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    bot.reply_to(message,
                 "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞.\n\n"
                 "–ö–æ–º–∞–Ω–¥—ã:\n"
                 "/push ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä—ã–Ω–æ–∫ –≤ —á–∞—Ç–µ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –±–æ–Ω—É—Å—ã –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)\n"
                 "/timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–Ω–∞> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
                 "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–∏ –±–æ–Ω—É—Å—ã (—è–∫–æ—Ä—å –∏ —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏)\n"
                 "/stat ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –∏ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã\n"
                 "/history <—Ä–µ—Å—É—Ä—Å>|bot ‚Äî –∏—Å—Ç–æ—Ä–∏—è –ø–æ —Ä–µ—Å—É—Ä—Å—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞\n"
                 "/help ‚Äî –ø–æ–º–æ—â—å")


@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.reply_to(message,
                 "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                 "‚Ä¢ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞). –ë–æ—Ç —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç '—Å—ã—Ä—ã–µ' —Ü–µ–Ω—ã.\n"
                 "‚Ä¢ /push ‚Äî —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –≤ —á–∞—Ç–µ (—Ü–µ–Ω—ã –±—É–¥—É—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—Å) –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
                 "‚Ä¢ /timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–ª—å> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n"
                 "‚Ä¢ /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–∏ –±–æ–Ω—É—Å—ã.\n"
                 "‚Ä¢ /stat ‚Äî –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω.\n"
                 "‚Ä¢ /history <—Ä–µ—Å—É—Ä—Å> ‚Äî –∏—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä—ã–Ω–∫–∞ –ø–æ —Ä–µ—Å—É—Ä—Å—É.\n"
                 "‚Ä¢ /history bot ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (changelog).")


# -------------------------
# Settings (/settings) flow
# -------------------------
@bot.message_handler(commands=['settings'])
def cmd_settings(message):
    user_id = message.from_user.id
    user_states[user_id] = STATE_SETTINGS_ANCHOR
    user_data[user_id] = {}

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –î–∞, –µ—Å—Ç—å –Ø–∫–æ—Ä—å", callback_data="anchor_yes"))
    kb.add(InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="anchor_no"))
    bot.reply_to(message, "‚öìÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ø–∫–æ—Ä—å (–¥–∞—ë—Ç +2%)?", reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data.startswith('anchor_'))
def handle_anchor_choice(call):
    user_id = call.from_user.id
    if user_states.get(user_id) != STATE_SETTINGS_ANCHOR:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
        return
    bot.answer_callback_query(call.id)
    has_anchor = call.data == "anchor_yes"
    user_data[user_id]["has_anchor"] = has_anchor
    user_states[user_id] = STATE_SETTINGS_TRADE_LEVEL
    bot.send_message(user_id, "‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è '–û—Å–Ω–æ–≤—ã —Ç–æ—Ä–≥–æ–≤–ª–∏' (0-10):")


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == STATE_SETTINGS_TRADE_LEVEL)
def handle_trade_level(message):
    user_id = message.from_user.id
    try:
        level = int(message.text.strip())
        if level < 0 or level > 10:
            bot.reply_to(message, "‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10.")
            return
    except Exception:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
        return

    has_anchor = user_data.get(user_id, {}).get("has_anchor", False)
    users.save_user_settings(user_id, has_anchor, level)

    bonus = users.get_user_bonus(user_id)
    bot.reply_to(message,
                 f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                 f"–Ø–∫–æ—Ä—å: {'‚úÖ' if has_anchor else '‚ùå'}\n"
                 f"–£—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {level}\n"
                 f"–û–±—â–∞—è –≤—ã–≥–æ–¥–∞: {bonus*100:.0f}%")

    user_states.pop(user_id, None)
    user_data.pop(user_id, None)


# -------------------------
# Push (–ø–æ–∫–∞–∑ —Ä—ã–Ω–∫–∞ + –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
# -------------------------
@bot.message_handler(commands=['push'])
def cmd_push(message):
    try:
        user_id = message.from_user.id
        resources = database.get_all_latest()
        if not resources:
            bot.reply_to(message, "‚ö†Ô∏è –†—ã–Ω–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å —Ä—ã–Ω–∫–∞.")
            return

        lines = ["üìä <b>–¢–µ–∫—É—â–∏–π —Ä—ã–Ω–æ–∫ (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–¥ –≤–∞—Å):</b>"]
        for rec in resources:
            res = rec['resource']
            raw_buy = rec['buy']
            raw_sell = rec['sell']
            adj_buy, adj_sell = users.adjust_prices_for_user(user_id, raw_buy, raw_sell)
            lines.append(f"{res}: –ö—É–ø–∏—Ç—å {adj_buy:.3f} / –ü—Ä–æ–¥–∞—Ç—å {adj_sell:.3f}")

        text = "\n".join(lines)
        sent = bot.send_message(message.chat.id, text, parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        user_settings = users.get_user_notification_settings(user_id)
        personal_on = bool(user_settings["notify_personal"])
        personal_interval = int(user_settings["notify_interval"])

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton(f"üîî –õ–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–ö–õ' if personal_on else '–í–´–ö–õ'}", callback_data="toggle_personal"))
        kb.add(InlineKeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª (–ª–∏—á–Ω–æ): {personal_interval} –º–∏–Ω", callback_data="choose_personal_interval"))

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Ç–∞
        if message.chat.type in ['group', 'supergroup']:
            chat_id = message.chat.id
            chat_cfg = database.get_chat_settings(chat_id)
            chat_on = bool(chat_cfg.get("notify_chat", 0))
            chat_interval = int(chat_cfg.get("notify_interval", 15))
            kb.add(InlineKeyboardButton(f"üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ: {'–í–ö–õ' if chat_on else '–í–´–ö–õ'}", callback_data=f"toggle_chat:{chat_id}"))
            kb.add(InlineKeyboardButton(f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª (—á–∞—Ç): {chat_interval} –º–∏–Ω", callback_data=f"choose_chat_interval:{chat_id}"))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º pinned_message_id –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å
            try:
                me = bot.get_me()
                member = bot.get_chat_member(chat_id, me.id)
                can_pin = getattr(member, "can_pin_messages", False) or getattr(member, "status", "") == "creator"
                if can_pin:
                    bot.pin_chat_message(chat_id, sent.message_id, disable_notification=True)
                    database.upsert_chat_settings(chat_id, chat_on, chat_interval, pinned_message_id=sent.message_id)
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ: {e}")

        bot.send_message(user_id, "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=kb)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /push")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /push.")


# callback handlers –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data == 'toggle_personal')
def handle_toggle_personal(call):
    uid = call.from_user.id
    bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    cur = users.get_user_notification_settings(uid)
    new_state = 0 if cur["notify_personal"] == 1 else 1
    users.set_user_notification(uid, bool(new_state), cur["notify_interval"])
    bot.send_message(uid, f"üîî –õ–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_personal_interval'))
def handle_choose_personal_interval(call):
    uid = call.from_user.id
    kb = InlineKeyboardMarkup(row_width=4)
    for m in [5, 15, 30, 60]:
        kb.add(InlineKeyboardButton(f"{m} –º–∏–Ω", callback_data=f"set_personal_interval:{m}"))
    bot.answer_callback_query(call.id)
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ª–∏—á–Ω–æ):", reply_markup=kb)


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_personal_interval:'))
def handle_set_personal_interval(call):
    uid = call.from_user.id
    try:
        _, m = call.data.split(':', 1)
        m = int(m)
        cur = users.get_user_notification_settings(uid)
        users.set_user_notification(uid, bool(cur["notify_personal"]), m)
        bot.answer_callback_query(call.id, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {m} –º–∏–Ω.")
        bot.send_message(uid, f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ª–∏—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {m} –º–∏–Ω.")
    except Exception:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_chat:'))
def handle_toggle_chat(call):
    try:
        _, chat_id_str = call.data.split(':', 1)
        chat_id = int(chat_id_str)
        bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞...")
        cfg = database.get_chat_settings(chat_id)
        new_state = 0 if cfg.get("notify_chat", 0) == 1 else 1
        database.upsert_chat_settings(chat_id, bool(new_state), cfg.get("notify_interval", 15), cfg.get("pinned_message_id"))
        bot.send_message(call.from_user.id, f"üí¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {'–≤–∫–ª—é—á–µ–Ω—ã' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}.")
    except Exception:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_chat_interval:'))
def handle_choose_chat_interval(call):
    try:
        _, chat_id_str = call.data.split(':', 1)
        chat_id = int(chat_id_str)
        uid = call.from_user.id
        kb = InlineKeyboardMarkup(row_width=4)
        for m in [5, 15, 30, 60]:
            kb.add(InlineKeyboardButton(f"{m} –º–∏–Ω", callback_data=f"set_chat_interval:{chat_id}:{m}"))
        bot.answer_callback_query(call.id)
        bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—á–∞—Ç):", reply_markup=kb)
    except Exception:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith('set_chat_interval:'))
def handle_set_chat_interval(call):
    try:
        _, chat_id_str, m_str = call.data.split(':', 2)
        chat_id = int(chat_id_str)
        m = int(m_str)
        cfg = database.get_chat_settings(chat_id)
        database.upsert_chat_settings(chat_id, cfg.get("notify_chat", 1), m, cfg.get("pinned_message_id"))
        bot.answer_callback_query(call.id, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {m} –º–∏–Ω.")
        bot.send_message(call.from_user.id, f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {m} –º–∏–Ω.")
    except Exception:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")


# -------------------------
# /stat ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
# -------------------------
@bot.message_handler(commands=['stat'])
def cmd_stat(message):
    try:
        user_id = message.from_user.id
        total_records = database.get_total_market_records()
        unique_resources = database.get_unique_resources_count()
        users_count = database.get_users_count()
        active_alerts = database.get_active_alerts_count()

        text_lines = [
            "<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>",
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Ä—ã–Ω–∫–∞: {total_records}",
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {unique_resources}",
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {users_count}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {active_alerts}",
            "‚îÄ" * 24,
            "<b>–¢–µ–∫—É—â–∏–µ (–æ—Ü–µ–Ω–æ—á–Ω—ã–µ) —Ü–µ–Ω—ã –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º:</b>"
        ]

        latest_list = database.get_all_latest()
        if not latest_list:
            text_lines.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä—ã–Ω–∫—É.")
            bot.reply_to(message, "\n".join(text_lines), parse_mode="HTML")
            return

        for rec in latest_list:
            resource = rec['resource']
            pred_buy, pred_sell, trend, speed_adj, last_ts = market.compute_extrapolated_price(resource, user_id, lookback_minutes=60)
            qty_week = database.get_week_max_qty(resource)
            last_time_str = datetime.fromtimestamp(last_ts).strftime("%d.%m %H:%M") if last_ts else "‚Äî"
            speed_str = f"{speed_adj:+.4f}/–º–∏–Ω" if speed_adj is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            trend_icon = "üìà" if trend == "up" else "üìâ" if trend == "down" else "‚û°Ô∏è"

            if pred_buy is None:
                pred_buy_text = "‚Äî"
            else:
                pred_buy_text = f"{pred_buy:.3f}"

            if pred_sell is None:
                pred_sell_text = "‚Äî"
            else:
                pred_sell_text = f"{pred_sell:.3f}"

            text_lines.append(
                f"{resource} ‚Äî {trend_icon} {trend}\n"
                f"  ~–ö—É–ø–∏—Ç—å: {pred_buy_text}  /  ~–ü—Ä–æ–¥–∞—Ç—å: {pred_sell_text}\n"
                f"  –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_time_str} | –°–∫–æ—Ä–æ—Å—Ç—å: {speed_str}\n"
                f"  –ú–∞–∫—Å. –æ–±—ä—ë–º –∑–∞ –Ω–µ–¥–µ–ª—é: {qty_week}"
            )

        bot.reply_to(message, "\n\n".join(text_lines), parse_mode="HTML")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /stat")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


# -------------------------
# /history ‚Äî –ª–∏–±–æ –∏—Å—Ç–æ—Ä–∏—è —Ä—ã–Ω–∫–∞, –ª–∏–±–æ changelog –±–æ—Ç–∞
# -------------------------
@bot.message_handler(commands=['history'])
def cmd_history(message):
    try:
        parts = message.text.split()[1:] if len(message.text.split()) > 1 else []
        if not parts:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/history <—Ä–µ—Å—É—Ä—Å> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Ä–µ—Å—É—Ä—Å—É\n/history bot ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞")
            return

        arg = parts[0].strip().lower()
        if arg in ("bot", "updates", "changelog"):
            text = "<b>üìú Changelog –±–æ—Ç–∞:</b>\n\n"
            for ln in CHANGELOG:
                text += f"‚Ä¢ {ln}\n"
            bot.reply_to(message, text, parse_mode="HTML")
            return

        resource = parts[0].capitalize()
        records = database.get_market_history(resource, limit=50)
        if not records:
            bot.reply_to(message, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {resource}.")
            return

        text = f"üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ {resource} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(records)}):\n\n"
        for r in records:
            t = datetime.fromtimestamp(r['timestamp']).strftime("%d.%m %H:%M")
            # –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—Ç, –∫—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç)
            adj_buy, adj_sell = users.adjust_prices_for_user(message.from_user.id, r['buy'], r['sell'])
            text += f"{t} ‚Äî –ö—É–ø–∏—Ç—å: {adj_buy:.3f} / –ü—Ä–æ–¥–∞—Ç—å: {adj_sell:.3f} (qty: {r.get('quantity', 0)})\n"

        bot.reply_to(message, text)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /history")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")


# -------------------------
# –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤
# -------------------------
@bot.message_handler(func=lambda msg: isinstance(getattr(msg, 'text', None), str) and "üé™" in msg.text)
def forward_market_handler(message):
    forward_from = getattr(message, "forward_from", None)
    forward_sender_name = getattr(message, "forward_sender_name", None)
    if not forward_from and not forward_sender_name:
        return

    try:
        market.handle_market_forward(bot, message)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞")
        try:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞.")
        except Exception:
            pass


# -------------------------
# /timer
# -------------------------
@bot.message_handler(commands=['timer'])
def cmd_timer(message):
    alerts.cmd_timer_handler(bot, message)


# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == '__main__':
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    alerts.start_background_tasks(bot)
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.polling(none_stop=True, interval=0, timeout=20)
