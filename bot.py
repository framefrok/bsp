# bot.py
import logging
import telebot
from telebot import types
import database
import users
import alerts
import market
from datetime import datetime

TOKEN = "YOUR_BOT_TOKEN_HERE"
bot = telebot.TeleBot(TOKEN)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

alerts.start_background_tasks(bot)

@bot.message_handler(commands=['start'])
def cmd_start(message):
    users.ensure_user(message.from_user.id, message.from_user.username)
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

@bot.message_handler(commands=['stat'])
def cmd_stat(message):
    stats = database.get_bot_stats()
    reply = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
    reply += f"- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('users', 0)}\n"
    reply += f"- –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {stats.get('resources', 0)}\n"
    reply += f"- –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ö–∞–º–µ–Ω—å: {stats.get('stone', 'N/A')}\n"
    reply += f"- –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –î–µ—Ä–µ–≤–æ: {stats.get('wood', 'N/A')}\n"
    reply += f"- –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ü—Ä–æ–≤–∏–∑–∏—è: {stats.get('food', 'N/A')}\n"
    reply += f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {stats.get('max_week', 0)}"
    bot.reply_to(message, reply)

@bot.message_handler(commands=['history'])
def cmd_history(message):
    records = database.get_bot_history(limit=20)
    if not records:
        bot.reply_to(message, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    reply = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
    for r in records:
        time_str = datetime.fromtimestamp(r['timestamp']).strftime("%Y-%m-%d %H:%M:%S")
        reply += f"- {time_str}: {r['text']}\n"
    bot.reply_to(message, reply)

@bot.message_handler(commands=['push'])
def cmd_push(message):
    users.ensure_user(message.from_user.id, message.from_user.username)
    settings = database.get_user_push_settings(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    if settings.get('enabled', True):
        markup.add(types.InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="push_toggle"))
    else:
        markup.add(types.InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="push_toggle"))
    markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)", callback_data="push_interval"))
    bot.reply_to(message, "‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("push"))
def callback_push(call):
    user_id = call.from_user.id
    settings = database.get_user_push_settings(user_id)
    if call.data == "push_toggle":
        new_status = not settings.get('enabled', True)
        database.update_user_push_settings(user_id, enabled=new_status)
        bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
    elif call.data == "push_interval":
        bot.answer_callback_query(call.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        @bot.message_handler(func=lambda m: m.from_user.id == user_id)
        def set_interval(message):
            try:
                minutes = int(message.text)
                database.update_user_push_settings(user_id, interval=minutes)
                bot.reply_to(message, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω.")
            except ValueError:
                bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@bot.message_handler(commands=['timer'])
def cmd_timer(message):
    alerts.cmd_timer_handler(bot, message)

@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_forward(message):
    if "üé™" in message.text:
        try:
            resource_data = market.parse_market_forward(message.text)
            for r in resource_data:
                database.insert_market_record(r['resource'], r['buy'], r['sell'], r['timestamp'])
            bot.reply_to(message, "‚úÖ –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞: {e}")

def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")

if __name__ == "__main__":
    main()
