import logging
import os
from datetime import datetime
import threading
import time

from dotenv import load_dotenv
import telebot
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

import database
import market
import users
import alerts

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("bsp_bot")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode=None)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
database.init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è /settings
user_states = {}  # user_id -> state
user_data = {}    # temporary data during settings

STATE_SETTINGS_ANCHOR = "settings_anchor"
STATE_SETTINGS_TRADE_LEVEL = "settings_trade_level"


# -------------------------
# –ö–æ–º–∞–Ω–¥—ã
# -------------------------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    bot.reply_to(message,
                 "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞.\n\n"
                 "–ö–æ–º–∞–Ω–¥—ã:\n"
                 "/push ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä—ã–Ω–æ–∫ –≤ —á–∞—Ç–µ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –±–æ–Ω—É—Å—ã)\n"
                 "/timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–Ω–∞> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
                 "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–∏ –±–æ–Ω—É—Å—ã (—è–∫–æ—Ä—å –∏ —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏)\n"
                 "/help ‚Äî –ø–æ–º–æ—â—å")


@bot.message_handler(commands=['help'])
def cmd_help(message):
    bot.reply_to(message,
                 "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                 "1) –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞). –ë–æ—Ç —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç '—Å—ã—Ä—ã–µ' —Ü–µ–Ω—ã.\n"
                 "2) /push ‚Äî —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –≤ —á–∞—Ç–µ (—Ü–µ–Ω—ã –±—É–¥—É—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—Å)\n"
                 "3) /timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–ª—å> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n"
                 "4) /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–∏ –±–æ–Ω—É—Å—ã.")


@bot.message_handler(commands=['settings'])
def cmd_settings(message):
    user_id = message.from_user.id
    user_states[user_id] = STATE_SETTINGS_ANCHOR
    user_data[user_id] = {}

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –î–∞, –µ—Å—Ç—å –Ø–∫–æ—Ä—å", callback_data="anchor_yes"))
    keyboard.add(InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="anchor_no"))

    bot.reply_to(message, "‚öìÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ø–∫–æ—Ä—å (–¥–∞—ë—Ç +2%)?", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('anchor_'))
def handle_anchor_choice(call):
    user_id = call.from_user.id
    if user_states.get(user_id) != STATE_SETTINGS_ANCHOR:
        bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
        return
    bot.answer_callback_query(call.id)
    has_anchor = call.data == "anchor_yes"
    user_data[user_id]["has_anchor"] = has_anchor
    user_states[user_id] = STATE_SETTINGS_TRADE_LEVEL
    bot.send_message(user_id, "‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è '–û—Å–Ω–æ–≤—ã —Ç–æ—Ä–≥–æ–≤–ª–∏' (0-10):")


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == STATE_SETTINGS_TRADE_LEVEL)
def handle_trade_level(message):
    user_id = message.from_user.id
    try:
        level = int(message.text.strip())
        if level < 0 or level > 10:
            bot.reply_to(message, "‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10.")
            return
    except Exception:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
        return

    has_anchor = user_data.get(user_id, {}).get("has_anchor", False)
    users.save_user_settings(user_id, has_anchor, level)

    bonus = users.get_user_bonus(user_id)
    bot.reply_to(message,
                 f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                 f"–Ø–∫–æ—Ä—å: {'‚úÖ' if has_anchor else '‚ùå'}\n"
                 f"–£—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {level}\n"
                 f"–û–±—â–∞—è –≤—ã–≥–æ–¥–∞: {bonus*100:.0f}%")

    user_states.pop(user_id, None)
    user_data.pop(user_id, None)


@bot.message_handler(commands=['push'])
def cmd_push(message):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä—ã–Ω–∫–∞ –≤ —á–∞—Ç (—Å —É—á—ë—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ —Ç–æ–≥–æ, –∫—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É).
    """
    try:
        user_id = message.from_user.id
        resources = database.get_all_latest()
        if not resources:
            bot.reply_to(message, "‚ö†Ô∏è –†—ã–Ω–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Å —Ä—ã–Ω–∫–∞.")
            return

        lines = ["üìä <b>–¢–µ–∫—É—â–∏–π —Ä—ã–Ω–æ–∫:</b>"]
        for rec in resources:
            res = rec['resource']
            raw_buy = rec['buy']
            raw_sell = rec['sell']
            adj_buy, adj_sell = users.adjust_prices_for_user(user_id, raw_buy, raw_sell)
            lines.append(f"{res}: –ö—É–ø–∏—Ç—å {adj_buy:.2f} / –ü—Ä–æ–¥–∞—Ç—å {adj_sell:.2f}")

        text = "\n".join(lines)
        sent = bot.send_message(message.chat.id, text, parse_mode="HTML")

        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞)
        if message.chat.type in ['group', 'supergroup']:
            try:
                me = bot.get_me()
                chat_member = bot.get_chat_member(message.chat.id, me.id)
                can_pin = getattr(chat_member, "can_pin_messages", False) or getattr(chat_member, "status", "") == "creator"
                if can_pin:
                    bot.pin_chat_message(message.chat.id, sent.message_id, disable_notification=True)
                else:
                    bot.send_message(message.from_user.id, "‚ö†Ô∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–∑–∞–∫—Ä–µ–ø–∏—Ç—å: {e}")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /push")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /push.")


# -------------------------
# –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–≤
# -------------------------
@bot.message_handler(func=lambda msg: isinstance(getattr(msg, 'text', None), str) and "üé™" in msg.text)
def forward_market_handler(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º (—Ñ–æ—Ä–≤–∞—Ä–¥).
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º forward_from/forward_sender_name.
    """
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è)
    forward_from = getattr(message, "forward_from", None)
    forward_sender_name = getattr(message, "forward_sender_name", None)
    if not forward_from and not forward_sender_name:
        # –æ–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    try:
        market.handle_market_forward(bot, message)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞")
        try:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞.")
        except Exception:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞.")


# -------------------------
# –ö–æ–º–∞–Ω–¥–∞ /timer
# -------------------------
@bot.message_handler(commands=['timer'])
def cmd_timer(message):
    alerts.cmd_timer_handler(bot, message)


# -------------------------
# –ó–∞–ø—É—Å–∫
# -------------------------
if __name__ == '__main__':
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    alerts.start_background_tasks(bot)
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.polling(none_stop=True, interval=0, timeout=20)
