# bot.py 

import logging
import telebot
from telebot import types
import database
import users
import alerts
import market
import time
from datetime import datetime

TOKEN = "YOUR_BOT_TOKEN_HERE"
bot = telebot.TeleBot(TOKEN)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

alerts.start_background_tasks(bot)

@bot.message_handler(commands=['start'])
def cmd_start(message):
    users.ensure_user(message.from_user.id, message.from_user.username)
    welcome = f"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}! –ë–æ—Ç BS Market Analytics –∑–∞–ø—É—â–µ–Ω.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/stat - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/history [—Ä–µ—Å—É—Ä—Å] - –ò—Å—Ç–æ—Ä–∏—è\n/status - –í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã\n/cancel - –û—Ç–º–µ–Ω–∞ –∞–ª–µ—Ä—Ç–æ–≤\n/settings - –ë–æ–Ω—É—Å—ã\n/push - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    bot.reply_to(message, welcome)

@bot.message_handler(commands=['help'])
def cmd_help(message):
    alerts.cmd_help_handler(bot, message)

@bot.message_handler(commands=['stat'])
def cmd_stat(message):
    user_id = message.from_user.id
    bonus_pct = int(users.get_user_bonus(user_id) * 100)
    now = datetime.now()
    global_ts = database.get_global_latest_timestamp()
    update_str = datetime.fromtimestamp(global_ts).strftime("%d.%m.%Y %H:%M") if global_ts else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    resources = ['–î–µ—Ä–µ–≤–æ', '–ö–∞–º–µ–Ω—å', '–ü—Ä–æ–≤–∏–∑–∏—è', '–õ–æ—à–∞–¥–∏']
    reply = f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞\nüïó –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_str}\nüîÉ –ë–æ–Ω—É—Å –∏–≥—Ä–æ–∫–∞: {bonus_pct}%\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    week_start = int(time.time()) - 7*24*3600

    for res in resources:
        pred_buy, pred_sell, trend, speed, last_ts = market.compute_extrapolated_price(res, user_id)
        if pred_buy is None:
            continue
        last_update_str = datetime.fromtimestamp(last_ts).strftime("%H:%M") if last_ts else "N/A"
        was_buy = database.get_market_week_max_price(res, 'buy', week_start)
        was_sell = database.get_market_week_max_price(res, 'sell', week_start)
        was_buy_adj, was_sell_adj = users.adjust_prices_for_user(user_id, was_buy, was_sell)
        buy_range = database.get_market_week_range(res, 'buy', week_start)
        sell_range = database.get_market_week_range(res, 'sell', week_start)
        max_qty = database.get_market_week_max_qty(res, week_start)
        trend_emoji = "üìà" if trend == "up" else "üìâ" if trend == "down" else "‚ûñ"
        speed_str = f"{speed:+.4f}/–º–∏–Ω" if speed else "0"
        reply += f"{market.RESOURCE_EMOJI.get(res, '')} {res}\n"
        reply += f"‚îú üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update_str}\n"
        reply += f"‚îú üíπ –ü–æ–∫—É–ø–∫–∞: {pred_buy:>8.3f} (–±—ã–ª–æ: {was_buy_adj:.3f})\n"
        reply += f"‚îÇ   –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é: {buy_range[0]:.3f} ‚Äî {buy_range[1]:.3f}\n"
        reply += f"‚îú üí∞ –ü—Ä–æ–¥–∞–∂–∞: {pred_sell:>8.3f} (–±—ã–ª–æ: {was_sell_adj:.3f})\n"
        reply += f"‚îÇ   –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é: {sell_range[0]:.3f} ‚Äî {sell_range[1]:.3f}\n"
        reply += f"‚îú üì¶ –ú–∞–∫—Å. –æ–±—ä—ë–º: {max_qty:,} —à—Ç.\n"
        reply += f"‚îî üìä –¢—Ä–µ–Ω–¥: {trend_emoji} {'—Ä–∞—Å—Ç—ë—Ç' if trend=='up' else '–ø–∞–¥–∞–µ—Ç' if trend=='down' else '—Å—Ç–∞–±–∏–ª–µ–Ω'} ({speed_str})\n\n"

    reply += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüìà ‚Äî —Ä–æ—Å—Ç | üìâ ‚Äî –ø–∞–¥–µ–Ω–∏–µ | ‚ûñ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ\n–¶–µ–Ω—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –∏–≥—Ä–æ–∫–∞."
    bot.reply_to(message, reply)

@bot.message_handler(commands=['history'])
def cmd_history(message):
    parts = message.text.split()
    resource = parts[1].capitalize() if len(parts) > 1 else None
    if not resource or resource not in ['–î–µ—Ä–µ–≤–æ', '–ö–∞–º–µ–Ω—å', '–ü—Ä–æ–≤–∏–∑–∏—è', '–õ–æ—à–∞–¥–∏']:
        bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ —Ä–µ—Å—É—Ä—Å: /history –î–µ—Ä–µ–≤–æ")
        return
    records = database.get_market_history(resource, hours=24)
    if not records:
        bot.reply_to(message, f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {resource}.")
        return
    reply = f"BS Market Analytics:\nüìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞ {resource} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–æ–≤:\n\n"
    grouped = {}
    for r in records:
        dt = datetime.fromtimestamp(r['timestamp'])
        hour = dt.hour
        if hour not in grouped:
            grouped[hour] = []
        grouped[hour].append(r)
    for hour in sorted(grouped, reverse=True):
        reply += f"üïê {hour:02d}:00:\n"
        for rec in sorted(grouped[hour], key=lambda x: x['timestamp']):
            time_str = datetime.fromtimestamp(rec['timestamp']).strftime("%H:%M")
            buy_adj, sell_adj = users.adjust_prices_for_user(message.from_user.id, rec['buy'], rec['sell'])
            reply += f"  {time_str} - –ö—É–ø–∏—Ç—å: {buy_adj:.2f}, –ü—Ä–æ–¥–∞—Ç—å: {sell_adj:.2f}\n"
        reply += "\n"
    trend = market.get_trend(records, "buy")
    speed = alerts.calculate_speed(records, "buy")
    trend_str = f"–¢—Ä–µ–Ω–¥: {'–ø–∞–¥–∞–µ—Ç üìâ' if trend=='down' else '—Ä–∞—Å—Ç—ë—Ç üìà' if trend=='up' else '—Å—Ç–∞–±–∏–ª–µ–Ω ‚ûñ'} ({speed:+.4f}/–º–∏–Ω)" if speed else "–¢—Ä–µ–Ω–¥: —Å—Ç–∞–±–∏–ª–µ–Ω ‚ûñ"
    reply += trend_str
    bot.reply_to(message, reply)

@bot.message_handler(commands=['status'])
def cmd_status(message):
    alerts.cmd_status_handler(bot, message)

@bot.message_handler(commands=['cancel'])
def cmd_cancel(message):
    alerts.cmd_cancel_handler(bot, message)

@bot.message_handler(commands=['settings'])
def cmd_settings(message):
    user_id = message.from_user.id
    user = database.get_user(user_id)
    anchor = bool(user.get('anchor', 0))
    trade_level = user.get('trade_level', 0)
    bonus = (0.02 if anchor else 0) + (0.02 * trade_level)
    users.set_user_bonus(user_id, bonus)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–Ø–∫–æ—Ä—å: " + ("–í–∫–ª" if anchor else "–í—ã–∫–ª"), callback_data="settings_anchor"))
    markup.add(types.InlineKeyboardButton(f"–£—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {trade_level}", callback_data="settings_trade"))
    reply = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n–Ø–∫–æ—Ä—å: {'–î–∞ (+2%)' if anchor else '–ù–µ—Ç'}\n–£—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {trade_level} (+{trade_level*2}%)\n–ë–æ–Ω—É—Å: {bonus*100:.0f}%"
    bot.reply_to(message, reply, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("settings_"))
def callback_settings(call):
    user_id = call.from_user.id
    if call.data == "settings_anchor":
        current = database.get_user(user_id).get('anchor', 0)
        new = 1 - current
        database.update_user_field(user_id, 'anchor', new)
        bonus = users.get_user_bonus(user_id)
        bot.answer_callback_query(call.id, f"–Ø–∫–æ—Ä—å {'–≤–∫–ª—é—á–µ–Ω' if new else '–≤—ã–∫–ª—é—á–µ–Ω'} ({bonus*100:.0f}%)")
    elif call.data == "settings_trade":
        bot.answer_callback_query(call.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏ (—á–∏—Å–ª–æ)")
        bot.register_next_step_handler(call.message, set_trade_level)

def set_trade_level(message):
    try:
        level = int(message.text)
        database.update_user_field(message.from_user.id, 'trade_level', level)
        bonus = users.get_user_bonus(message.from_user.id)
        bot.reply_to(message, f"–£—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {level} ({bonus*100:.0f}%)")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.")

@bot.message_handler(commands=['push'])
def cmd_push(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    is_group = message.chat.type in ['group', 'supergroup']
    settings = database.get_user_push_settings(user_id) if not is_group else database.get_chat_settings(chat_id)
    markup = types.InlineKeyboardMarkup()
    enabled_text = "–í–∫–ª—é—á–∏—Ç—å" if not settings.get('notify_enabled', True) else "–û—Ç–∫–ª—é—á–∏—Ç—å"
    markup.add(types.InlineKeyboardButton(f"{enabled_text} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="push_toggle"))
    markup.add(types.InlineKeyboardButton(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings.get('notify_interval', 15)} –º–∏–Ω", callback_data="push_interval"))
    if is_group:
        markup.add(types.InlineKeyboardButton("–û—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ", callback_data="push_unpin"))
        markup.add(types.InlineKeyboardButton("–ù–µ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –≤ —á–∞—Ç–µ", callback_data="push_no_pin"))
    bot.reply_to(message, "‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("push"))
def callback_push(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    is_group = call.message.chat.type in ['group', 'supergroup']
    settings = database.get_user_push_settings(user_id) if not is_group else database.get_chat_settings(chat_id)
    if call.data == "push_toggle":
        new_status = not settings.get('enabled', True)
        if is_group:
            database.upsert_chat_settings(chat_id, new_status, settings['notify_interval'])
        else:
            database.update_user_push_settings(user_id, enabled=new_status)
        bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
    elif call.data == "push_interval":
        bot.answer_callback_query(call.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")
        if is_group:
            bot.register_next_step_handler(call.message, lambda m: set_chat_interval(m, chat_id))
        else:
            bot.register_next_step_handler(call.message, lambda m: set_user_interval(m, user_id))
    elif call.data == "push_unpin":
        database.unpin_all_messages(chat_id)
        bot.answer_callback_query(call.id, "–í—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω—ã")
    elif call.data == "push_no_pin":
        database.set_chat_no_pin(chat_id, True)
        bot.answer_callback_query(call.id, "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")

def set_user_interval(message, user_id):
    try:
        minutes = int(message.text)
        database.update_user_push_settings(user_id, interval=minutes)
        bot.reply_to(message, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {minutes} –º–∏–Ω")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

def set_chat_interval(message, chat_id):
    try:
        minutes = int(message.text)
        settings = database.get_chat_settings(chat_id)
        database.upsert_chat_settings(chat_id, settings['notify_enabled'], minutes)
        bot.reply_to(message, f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {minutes} –º–∏–Ω")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

@bot.message_handler(commands=['timer'])
def cmd_timer(message):
    alerts.cmd_timer_handler(bot, message)

@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_forward(message):
    if "üé™" in message.text:
        market.handle_market_forward(bot, message)

# –í bot.py
@bot.message_handler(commands=['buyalert'])
def cmd_buyalert(message):
    if message.chat.type not in ['group', 'supergroup']:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return

    parts = message.text.split()[1:]
    if len(parts) != 3:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buyalert <—Ä–µ—Å—É—Ä—Å> <–º–∞–∫—Å_—Ü–µ–Ω–∞> <–º–∏–Ω_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n–ü—Ä–∏–º–µ—Ä: /buyalert –î–µ—Ä–µ–≤–æ 8.5 50000")
        return

    resource = parts[0].capitalize()
    try:
        threshold = float(parts[1])
        min_qty = int(parts[2])
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –¶–µ–Ω–∞ ‚Äî —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    if threshold <= 0 or min_qty <= 0:
        bot.reply_to(message, "‚ùå –¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏.")
        return

    chat_id = message.chat.id
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
    conn = database.get_connection()
    c = conn.cursor()
    c.execute("""
        INSERT INTO chat_profit_alerts (chat_id, resource, threshold_price, min_quantity, active)
        VALUES (?, ?, ?, ?, 1)
        ON CONFLICT(chat_id, resource) DO UPDATE SET
        threshold_price=excluded.threshold_price,
        min_quantity=excluded.min_quantity,
        active=1
    """, (chat_id, resource, threshold, min_qty))
    conn.commit()
    conn.close()

    bot.reply_to(message, f"‚úÖ –ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: @{message.from_user.username} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å {resource} –ø–æ —Ü–µ–Ω–µ ‚â§ {threshold} –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ‚â• {min_qty} —à—Ç.")

def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")

if __name__ == "__main__":
    main()
