# alerts.py
import threading
import time
import logging
from datetime import datetime, timedelta
from typing import List, Optional

import database
import users
import market

logger = logging.getLogger(__name__)


def calculate_speed(records: List[dict], price_field: str = "buy") -> Optional[float]:
    if not records or len(records) < 2:
        return None
    first = records[0]
    last = records[-1]
    price_delta = last[price_field] - first[price_field]
    time_delta_minutes = (last['timestamp'] - first['timestamp']) / 60.0
    if time_delta_minutes < 0.1:
        return None
    speed = price_delta / time_delta_minutes
    return round(speed, 6)


def get_trend(records: List[dict], price_field: str = "buy") -> str:
    if not records or len(records) < 2:
        return "stable"
    first_price = records[0][price_field]
    last_price = records[-1][price_field]
    if last_price > first_price:
        return "up"
    elif last_price < first_price:
        return "down"
    else:
        return "stable"


def schedule_alert(alert_id: int, bot):
    try:
        alert = database.get_alert_by_id(alert_id)
        if not alert:
            return

        alert_time = datetime.fromisoformat(alert['alert_time'])
        now = datetime.now()
        sleep_s = (alert_time - now).total_seconds()
        if sleep_s > 0:
            time.sleep(sleep_s)

        current = database.get_latest_market(alert['resource'])
        if not current:
            try:
                bot.send_message(alert['user_id'], f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª—å: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {alert['resource']}.")
            except Exception:
                pass
            database.update_alert_status(alert_id, 'error')
            return

        current_price_adj, _ = users.adjust_prices_for_user(alert['user_id'], current['buy'], current['sell'])

        reached = False
        if alert['direction'] == 'down' and current_price_adj <= alert['target_price']:
            reached = True
        if alert['direction'] == 'up' and current_price_adj >= alert['target_price']:
            reached = True

        if reached:
            try:
                bot.send_message(alert['user_id'], f"üîî –í–∞—à —Ç–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª! {alert['resource']} –¥–æ—Å—Ç–∏–≥–ª–∞ {alert['target_price']:.2f}. –¢–µ–∫—É—â–∞—è: {current_price_adj:.2f}")
            except Exception:
                pass
            database.update_alert_status(alert_id, 'completed')
            try:
                if alert.get('chat_id'):
                    bot.send_message(alert['chat_id'], f"üîî –¢–∞–π–º–µ—Ä @{alert['user_id']} —Å—Ä–∞–±–æ—Ç–∞–ª: {alert['resource']} –¥–æ—Å—Ç–∏–≥–ª–∞ {alert['target_price']:.2f} (—Ç–µ–∫—É—â–∞—è: {current_price_adj:.2f}).")
            except Exception:
                pass
        else:
            try:
                bot.send_message(alert['user_id'], f"‚è∞ –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ —Ü–µ–ª—å ({alert['target_price']:.2f}) –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –¢–µ–∫—É—â–∞—è: {current_price_adj:.2f}")
            except Exception:
                pass
            database.update_alert_status(alert_id, 'expired')

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ schedule_alert")
        try:
            database.update_alert_status(alert_id, 'error')
        except Exception:
            pass


def update_dynamic_timers_once(bot):
    try:
        active_alerts = database.get_active_alerts()
        now = datetime.now()
        for alert in active_alerts:
            try:
                records = database.get_recent_market(alert['resource'], minutes=15)
                if not records or len(records) < 2:
                    continue

                latest = database.get_latest_market(alert['resource'])
                if not latest:
                    continue

                created_ts = datetime.fromisoformat(alert['created_at']).timestamp() if alert.get('created_at') else 0
                if latest['timestamp'] <= created_ts:
                    continue

                bonus = users.get_user_bonus(alert['user_id'])
                current_adj_price, _ = users.adjust_prices_for_user(alert['user_id'], latest['buy'], latest['sell'])
                speed_raw = calculate_speed(records, "buy")
                if speed_raw is None:
                    continue

                adj_speed = speed_raw / (1 + bonus) if isinstance(bonus, float) else speed_raw
                if adj_speed is None or adj_speed == 0:
                    continue

                current_trend = get_trend(records, "buy")
                if (alert['direction'] == "down" and current_trend == "up") or (alert['direction'] == "up" and current_trend == "down"):
                    try:
                        bot.send_message(alert['user_id'], f"‚ö†Ô∏è –¢—Ä–µ–Ω–¥ –¥–ª—è {alert['resource']} –∏–∑–º–µ–Ω–∏–ª—Å—è (—Ç–µ–ø–µ—Ä—å {current_trend}). –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")
                    except Exception:
                        pass
                    database.update_alert_status(alert['id'], 'trend_changed')
                    continue

                if (alert['direction'] == "down" and current_adj_price <= alert['target_price']) or (alert['direction'] == "up" and current_adj_price >= alert['target_price']):
                    try:
                        bot.send_message(alert['user_id'], f"üîî {alert['resource']} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏ {alert['target_price']:.2f} (—Ç–µ–∫—É—â–∞—è: {current_adj_price:.2f}).")
                    except Exception:
                        pass
                    database.update_alert_status(alert['id'], 'completed')
                    continue

                price_diff = alert['target_price'] - current_adj_price
                if (alert['direction'] == "down" and adj_speed >= 0) or (alert['direction'] == "up" and adj_speed <= 0):
                    continue

                time_minutes = abs(price_diff) / abs(adj_speed)
                new_alert_time = datetime.now() + timedelta(minutes=time_minutes)

                database.update_alert_fields(alert['id'], {
                    'alert_time': new_alert_time.isoformat(),
                    'speed': adj_speed,
                    'current_price': current_adj_price
                })

                try:
                    old = datetime.fromisoformat(alert['alert_time']) if alert.get('alert_time') else None
                    if old:
                        diff_min = abs((new_alert_time - old).total_seconds() / 60.0)
                        if diff_min > 5:
                            bot.send_message(alert['user_id'], f"üîÑ –¢–∞–π–º–µ—Ä –¥–ª—è {alert['resource']} –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_alert_time.strftime('%H:%M:%S')}")
                except Exception:
                    pass

            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞ {alert.get('id')}: {e}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ update_dynamic_timers_once")


def cleanup_expired_alerts_loop():
    while True:
        try:
            now = datetime.now()
            active = database.get_active_alerts()
            expired_ids = []
            for a in active:
                try:
                    if not a.get('alert_time'):
                        continue
                    at = datetime.fromisoformat(a['alert_time'])
                    if at < (now - timedelta(hours=1)):
                        expired_ids.append(a['id'])
                except Exception:
                    continue
            for aid in expired_ids:
                database.update_alert_status(aid, 'cleanup_expired')
                logger.info(f"–û—á–∏—Å—Ç–∫–∞: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç {aid} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω)")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ cleanup_expired_alerts_loop")
        time.sleep(600)


def stale_db_reminder_loop(bot):
    while True:
        try:
            global_ts = database.get_global_latest_timestamp()
            now_ts = int(time.time())
            delta = None if not global_ts else now_ts - global_ts
            if delta is not None and delta < 15 * 60:
                time.sleep(60)
                continue

            users_list = database.get_users_with_notifications_enabled()
            for u in users_list:
                uid = u["id"]
                interval = int(u.get("notify_interval", 15))
                last = int(u.get("last_reminder", 0))
                if now_ts - last >= interval * 60:
                    try:
                        bot.send_message(uid, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–µ–∂–∏–π —Ñ–æ—Ä–≤–∞—Ä–¥ —Ä—ã–Ω–∫–∞ (üé™). –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ /push.")
                    except Exception:
                        pass
                    database.set_user_last_reminder(uid, now_ts)

            chats = database.get_chats_with_notifications_enabled()
            for c in chats:
                chat_id = c["chat_id"]
                interval = int(c.get("notify_interval", 15))
                last = int(c.get("last_reminder", 0))
                if now_ts - last >= interval * 60:
                    try:
                        bot.send_message(chat_id, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Ä—ã–Ω–∫–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º.")
                    except Exception:
                        pass
                    database.set_chat_last_reminder(chat_id, now_ts)

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ stale_db_reminder_loop")
        time.sleep(60)


def update_dynamic_timers_loop(bot):
    while True:
        try:
            update_dynamic_timers_once(bot)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ update_dynamic_timers_loop")
        time.sleep(60)


def check_profit_alerts(bot):
    while True:
        try:
            chats = database.get_chats_with_profit_alerts()
            for chat in chats:
                chat_id = chat['chat_id']
                alerts = database.get_chat_profit_alerts(chat_id)
                latest = database.get_latest_market_all()
                for alert in alerts:
                    resource = alert['resource']
                    threshold = alert['threshold_price']
                    min_qty = alert['min_quantity']
                    current = next((r for r in latest if r['resource'] == resource), None)
                    if current and current['buy'] <= threshold and current['quantity'] >= min_qty:
                        try:
                            bot.send_message(chat_id, f"@all –ü–æ—Ä–∞ –±—Ä–∞—Ç—å! {resource} –û–∂–∏–¥–∞–µ—Ç —Ç–≤–æ–µ–π –ø–æ–∫—É–ø–∫–∏.")
                            database.deactivate_profit_alert(chat_id, resource)
                        except Exception:
                            pass
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ check_profit_alerts")
        time.sleep(300)


def start_background_tasks(bot):
    threading.Thread(target=cleanup_expired_alerts_loop, daemon=True).start()
    threading.Thread(target=update_dynamic_timers_loop, args=(bot,), daemon=True).start()
    threading.Thread(target=stale_db_reminder_loop, args=(bot,), daemon=True).start()
    threading.Thread(target=check_profit_alerts, args=(bot,), daemon=True).start()


def cmd_timer_handler(bot, message):
    try:
        parts = message.text.split()[1:]
        if len(parts) != 2:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üìâ Down (–ø–∞–¥–µ–Ω–∏–µ)", callback_data="timer_down"))
            markup.add(types.InlineKeyboardButton("üìà Up (—Ä–æ—Å—Ç)", callback_data="timer_up"))
            bot.reply_to(message, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è /timer {parts[0] if parts else ''} {parts[1] if len(parts)>1 else ''}:", reply_markup=markup)
            return

        resource = parts[0].capitalize()
        try:
            target_price = float(parts[1].replace(',', '.'))
            if target_price <= 0:
                bot.reply_to(message, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü—Ä–∏–º–µ—Ä: 8.50")
            return

        latest = database.get_latest_market(resource)
        if not latest:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {resource}. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Ä—ã–Ω–∫–∞.")
            return

        records = database.get_recent_market(resource, minutes=15)
        if len(records) < 2:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 15 –º–∏–Ω—É—Ç –¥–ª—è {resource}.")
            return

        current_raw_buy = latest['buy']
        user_id = message.from_user.id
        current_buy_adj, _ = users.adjust_prices_for_user(user_id, current_raw_buy, latest['sell'])
        bonus = users.get_user_bonus(user_id)
        direction = "down" if target_price < current_buy_adj else "up"

        speed_raw = calculate_speed(records, "buy")
        if speed_raw is None:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.")
            return

        adj_speed = speed_raw / (1 + bonus) if isinstance(bonus, float) else speed_raw
        if adj_speed == 0:
            bot.reply_to(message, "‚ö†Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞.")
            return

        if (direction == "down" and target_price >= current_buy_adj) or (direction == "up" and target_price <= current_buy_adj):
            bot.reply_to(message, f"‚ö†Ô∏è –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {'–Ω–∏–∂–µ' if direction == 'down' else '–≤—ã—à–µ'} —Ç–µ–∫—É—â–µ–π ({current_buy_adj:.2f}).")
            return

        trend = get_trend(records, "buy")
        if (direction == "down" and trend == "up") or (direction == "up" and trend == "down"):
            bot.reply_to(message, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ ‚Äî –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–Ω–¥—É. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.")

        if (direction == "down" and adj_speed >= 0) or (direction == "up" and adj_speed <= 0):
            bot.reply_to(message, "‚ö†Ô∏è –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å –¥–≤–∏–∂–µ—Ç—Å—è –Ω–µ –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return

        price_diff = target_price - current_buy_adj
        time_minutes = abs(price_diff) / abs(adj_speed)
        alert_time = datetime.now() + timedelta(minutes=time_minutes)

        chat_id = message.chat.id if message.chat.type in ['group', 'supergroup'] else None

        alert_id = database.insert_alert_record(user_id, resource, target_price, direction, adj_speed, current_buy_adj, alert_time.isoformat(), chat_id)

        alert_time_str = alert_time.strftime("%H:%M:%S")
        username = message.from_user.username or str(message.from_user.id)
        notify = (
            f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"–†–µ—Å—É—Ä—Å: {resource}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_buy_adj:.2f}\n"
            f"–¶–µ–ª—å: {target_price:.2f} ({'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'})\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {adj_speed:+.6f} –≤ –º–∏–Ω—É—Ç—É\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: ~{int(time_minutes)} –º–∏–Ω.\n"
            f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {alert_time_str}"
        )
        sent = bot.reply_to(message, notify)

        if chat_id and chat_id != user_id:
            try:
                bot.pin_chat_message(chat_id, sent.message_id, disable_notification=True)
                database.upsert_chat_settings(chat_id, True, database.get_chat_settings(chat_id)["notify_interval"], pinned_message_id=sent.message_id)
            except Exception:
                pass

        threading.Thread(target=schedule_alert, args=(alert_id, bot), daemon=True).start()

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ cmd_timer_handler")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞.")


def cmd_status_handler(bot, message):
    user_id = message.from_user.id
    alerts = database.get_user_active_alerts(user_id)
    if not alerts:
        bot.reply_to(message, "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")
        return
    reply = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n\n"
    for a in alerts:
        time_left = datetime.fromisoformat(a['alert_time']) - datetime.now()
        if time_left.total_seconds() > 0:
            left_str = f"{int(time_left.total_seconds() // 60)} –º–∏–Ω. {int(time_left.total_seconds() % 60)} —Å–µ–∫."
            time_str = datetime.fromisoformat(a['alert_time']).strftime("%H:%M:%S")
            reply += f"‚Ä¢ {a['resource']} ‚Üí {a['target_price']:.2f} ({'–ø–∞–¥–µ–Ω–∏–µ' if a['direction']=='down' else '—Ä–æ—Å—Ç'})\n  –û—Å—Ç–∞–ª–æ—Å—å: {left_str}\n  –°—Ä–∞–±–æ—Ç–∞–µ—Ç –≤: {time_str}\n\n"
    bot.reply_to(message, reply)


def cmd_cancel_handler(bot, message):
    user_id = message.from_user.id
    count = database.cancel_user_alerts(user_id)
    bot.reply_to(message, f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")


def cmd_help_handler(bot, message):
    help_text = """
üÜò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìä /stat - –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ —Ç—Ä–µ–Ω–¥–∞–º–∏.
üìú /history [—Ä–µ—Å—É—Ä—Å] - –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –∑–∞ 24 —á–∞—Å–∞ (—Ä–µ—Å—É—Ä—Å: –î–µ—Ä–µ–≤–æ, –ö–∞–º–µ–Ω—å, –ü—Ä–æ–≤–∏–∑–∏—è, –õ–æ—à–∞–¥–∏).
üîî /timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–Ω–∞> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã (—Å –∫–Ω–æ–ø–∫–∞–º–∏ up/down).
üìã /status - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.
üóëÔ∏è /cancel - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.
‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —è–∫–æ—Ä—å –∏ —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏.
‚ö° /push - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
üé™ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

–î–ª—è –≥—Ä—É–ø–ø: –ë–æ—Ç –º–æ–∂–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å @all –æ –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö –∏ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    bot.reply_to(message, help_text)