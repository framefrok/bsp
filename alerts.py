import threading
import time
import logging
from datetime import datetime, timedelta
from typing import List, Optional

from database import (
    insert_alert_record, get_active_alerts, get_alert_by_id, get_latest_market,
    get_recent_market, update_alert_status, update_alert_fields, get_all_latest
)
from users import get_user_bonus, adjust_prices_for_user

logger = logging.getLogger(__name__)


def calculate_speed(records: List[dict], price_field: str = "buy") -> Optional[float]:
    if not records or len(records) < 2:
        return None
    first = records[0]
    last = records[-1]
    price_delta = last[price_field] - first[price_field]
    time_delta_minutes = (last['timestamp'] - first['timestamp']) / 60.0
    if time_delta_minutes == 0:
        return None
    # –ó–∞—â–∏—Ç–Ω—ã–π –ø–æ—Ä–æ–≥
    if time_delta_minutes < 0.1:
        return None
    speed = price_delta / time_delta_minutes
    return round(speed, 6)


def get_trend(records: List[dict], price_field: str = "buy") -> str:
    if not records or len(records) < 2:
        return "stable"
    first_price = records[0][price_field]
    last_price = records[-1][price_field]
    if last_price > first_price:
        return "up"
    elif last_price < first_price:
        return "down"
    else:
        return "stable"


def schedule_alert(alert_id: int, bot):
    """
    Sleep –ø–æ–∫–∞ –¥–æ alert_time –∏ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    try:
        alert = get_alert_by_id(alert_id)
        if not alert:
            return

        alert_time = datetime.fromisoformat(alert['alert_time'])
        now = datetime.now()
        sleep_s = (alert_time - now).total_seconds()
        if sleep_s > 0:
            time.sleep(sleep_s)

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
        current = get_latest_market(alert['resource'])
        if not current:
            bot.send_message(alert['user_id'], f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª—å: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {alert['resource']}.")
            update_alert_status(alert_id, 'error')
            return

        # –ü—Ä–∏–º–µ–Ω–∏–º –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–µ–∫—É—â–µ–π —Å—ã—Ä–æ–π —Ü–µ–Ω–µ
        current_price_adj, _ = adjust_prices_for_user(alert['user_id'], current['buy'], current['sell'])

        reached = False
        if alert['direction'] == 'down' and current_price_adj <= alert['target_price']:
            reached = True
        if alert['direction'] == 'up' and current_price_adj >= alert['target_price']:
            reached = True

        try:
            username = None
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å username —á–µ—Ä–µ–∑ Telegram API (–±–µ–∑ –æ—à–∏–±–∫–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
            # –ë–æ—Ç –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø–∞ ‚Äî –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ bot.send_message
            if reached:
                text = (
                    f"üîî –í–∞—à —Ç–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª!\n"
                    f"{alert['resource']} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏ {alert['target_price']:.2f}\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price_adj:.2f}\n"
                )
                bot.send_message(alert['user_id'], text)
                update_alert_status(alert_id, 'completed')
            else:
                text = (
                    f"‚è∞ –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ —Ü–µ–ª—å ({alert['target_price']:.2f}) –µ—â—ë –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price_adj:.2f}\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å."
                )
                bot.send_message(alert['user_id'], text)
                update_alert_status(alert_id, 'expired')
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ alert {alert_id}: {e}")
            update_alert_status(alert_id, 'error')

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ schedule_alert")
        try:
            update_alert_status(alert_id, 'error')
        except Exception:
            pass


def update_dynamic_timers_once(bot):
    """
    –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞).
    """
    try:
        active_alerts = get_active_alerts()
        now = datetime.now()
        for alert in active_alerts:
            try:
                records = get_recent_market(alert['resource'], minutes=15)
                if not records or len(records) < 2:
                    continue

                latest = get_latest_market(alert['resource'])
                if not latest:
                    continue

                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ latest –Ω–µ –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                created_ts = datetime.fromisoformat(alert['created_at']).timestamp() if alert.get('created_at') else 0
                if latest['timestamp'] <= created_ts:
                    continue

                bonus = get_user_bonus(alert['user_id'])
                current_adj_price, _ = adjust_prices_for_user(alert['user_id'], latest['buy'], latest['sell'])
                speed = calculate_speed(records, "buy")
                if speed is None:
                    continue

                adj_speed = speed / (1 + bonus) if isinstance(bonus, float) else speed
                # –∑–∞—â–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                if adj_speed == 0 or adj_speed is None:
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
                current_trend = get_trend(records, "buy")
                if (alert['direction'] == "down" and current_trend == "up") or \
                   (alert['direction'] == "up" and current_trend == "down"):
                    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
                    try:
                        bot.send_message(alert['user_id'],
                                         f"‚ö†Ô∏è –¢—Ä–µ–Ω–¥ –¥–ª—è {alert['resource']} –∏–∑–º–µ–Ω–∏–ª—Å—è (—Ç–µ–ø–µ—Ä—å {current_trend}). –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")
                    except Exception:
                        pass
                    update_alert_status(alert['id'], 'trend_changed')
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
                if (alert['direction'] == "down" and current_adj_price <= alert['target_price']) or \
                   (alert['direction'] == "up" and current_adj_price >= alert['target_price']):
                    try:
                        bot.send_message(alert['user_id'],
                                         f"üîî {alert['resource']} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏ {alert['target_price']:.2f} (—Ç–µ–∫—É—â–∞—è: {current_adj_price:.2f}).")
                    except Exception:
                        pass
                    update_alert_status(alert['id'], 'completed')
                    continue

                # –ù–æ–≤—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏
                price_diff = alert['target_price'] - current_adj_price
                if (alert['direction'] == "down" and adj_speed >= 0) or (alert['direction'] == "up" and adj_speed <= 0):
                    # –¶–µ–Ω–∞ –Ω–µ –¥–≤–∏–∂–µ—Ç—Å—è –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
                    continue

                time_minutes = abs(price_diff) / abs(adj_speed)
                new_alert_time = datetime.now() + timedelta(minutes=time_minutes)

                update_alert_fields(alert['id'], {
                    'alert_time': new_alert_time.isoformat(),
                    'speed': adj_speed,
                    'current_price': current_adj_price
                })

                # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –Ω–æ–≤—ã—Ö/—Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–∞—Ö > 5 –º–∏–Ω—É—Ç ‚Äî —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    old = datetime.fromisoformat(alert['alert_time']) if alert.get('alert_time') else None
                    if old:
                        diff_min = abs((new_alert_time - old).total_seconds() / 60.0)
                        if diff_min > 5:
                            bot.send_message(alert['user_id'],
                                             f"üîÑ –¢–∞–π–º–µ—Ä –¥–ª—è {alert['resource']} –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_alert_time.strftime('%H:%M:%S')}")
                except Exception:
                    pass

            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ –∞–ª–µ—Ä—Ç–∞ {alert.get('id')}: {e}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ update_dynamic_timers_once")


def cleanup_expired_alerts_loop():
    """
    –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –æ—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö alert_time —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥.
    """
    while True:
        try:
            now = datetime.now()
            active = get_active_alerts()
            expired_ids = []
            for a in active:
                try:
                    if not a.get('alert_time'):
                        continue
                    at = datetime.fromisoformat(a['alert_time'])
                    if at < (now - timedelta(hours=1)):
                        expired_ids.append(a['id'])
                except Exception:
                    continue
            for aid in expired_ids:
                update_alert_status(aid, 'cleanup_expired')
                logger.info(f"–û—á–∏—Å—Ç–∫–∞: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç {aid} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω)")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ cleanup_expired_alerts_loop")
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç


def update_dynamic_timers_loop(bot):
    while True:
        try:
            update_dynamic_timers_once(bot)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ update_dynamic_timers_loop")
        time.sleep(60)


def start_background_tasks(bot):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Ñ–æ–Ω–∞
    t1 = threading.Thread(target=cleanup_expired_alerts_loop, daemon=True)
    t1.start()
    t2 = threading.Thread(target=update_dynamic_timers_loop, args=(bot,), daemon=True)
    t2.start()


def cmd_timer_handler(bot, message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–ª—å>
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º schedule_alert.
    """
    try:
        parts = message.text.split()[1:]
        if len(parts) != 2:
            bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞>\n–ü—Ä–∏–º–µ—Ä: /timer –î–µ—Ä–µ–≤–æ 8.50")
            return

        resource = parts[0].capitalize()
        try:
            target_price = float(parts[1].replace(',', '.'))
            if target_price <= 0:
                bot.reply_to(message, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü—Ä–∏–º–µ—Ä: 8.50")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–∞—Å—á—ë—Ç—ã
        latest = get_latest_market(resource)
        if not latest:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {resource}. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Ä—ã–Ω–∫–∞.")
            return

        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç
        records = get_recent_market(resource, minutes=15)
        if len(records) < 2:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 15 –º–∏–Ω—É—Ç –¥–ª—è {resource}.")
            return

        # –¢–µ–∫—É—â–∞—è "—Å—ã—Ä–∞—è" —Ü–µ–Ω–∞
        current_raw_buy = latest['buy']
        current_raw_sell = latest['sell']

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—Ç, –∫—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä)
        user_id = message.from_user.id
        current_buy_adj, current_sell_adj = adjust_prices_for_user(user_id, current_raw_buy, current_raw_sell)
        bonus = get_user_bonus(user_id)

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction = "down" if target_price < current_buy_adj else "up"

        # –°–∫–æ—Ä–æ—Å—Ç—å (–Ω–∞ –±–∞–∑–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        speed_raw = calculate_speed(records, "buy")
        if speed_raw is None:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.")
            return

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        adj_speed = speed_raw / (1 + bonus) if isinstance(bonus, float) else speed_raw
        if adj_speed == 0:
            bot.reply_to(message, "‚ö†Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (direction == "down" and target_price >= current_buy_adj) or \
           (direction == "up" and target_price <= current_buy_adj):
            bot.reply_to(message, f"‚ö†Ô∏è –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {'–Ω–∏–∂–µ' if direction == 'down' else '–≤—ã—à–µ'} —Ç–µ–∫—É—â–µ–π ({current_buy_adj:.2f}).")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
        trend = get_trend(records, "buy")
        if (direction == "down" and trend == "up") or (direction == "up" and trend == "down"):
            bot.reply_to(message, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ ‚Äî –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–Ω–¥—É. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.")

        if (direction == "down" and adj_speed >= 0) or (direction == "up" and adj_speed <= 0):
            bot.reply_to(message, "‚ö†Ô∏è –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å –¥–≤–∏–∂–µ—Ç—Å—è –Ω–µ –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return

        price_diff = target_price - current_buy_adj
        time_minutes = abs(price_diff) / abs(adj_speed)
        alert_time = datetime.now() + timedelta(minutes=time_minutes)

        chat_id = message.chat.id if message.chat.type in ['group', 'supergroup'] else None

        alert_id = insert_alert_record(user_id, resource, target_price, direction, adj_speed, current_buy_adj, alert_time.isoformat(), chat_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        alert_time_str = alert_time.strftime("%H:%M:%S")
        username = message.from_user.username or str(message.from_user.id)
        notify = (
            f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"–†–µ—Å—É—Ä—Å: {resource}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_buy_adj:.2f}\n"
            f"–¶–µ–ª—å: {target_price:.2f} ({'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'})\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {adj_speed:+.6f} –≤ –º–∏–Ω—É—Ç—É\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: ~{int(time_minutes)} –º–∏–Ω.\n"
            f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {alert_time_str}"
        )
        sent = bot.reply_to(message, notify)

        # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞)
        if chat_id and chat_id != user_id:
            try:
                bot.pin_chat_message(chat_id, sent.message_id, disable_notification=True)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {chat_id}: {e}")

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        threading.Thread(target=schedule_alert, args=(alert_id, bot), daemon=True).start()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ cmd_timer_handler")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞.")
