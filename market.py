import re
import logging
from datetime import datetime
from typing import Optional, Dict, Any
import threading
import time

from database import insert_market_record, get_latest_market, get_recent_market
from users import get_user_bonus, adjust_prices_for_user, get_user_settings

logger = logging.getLogger(__name__)

EMOJI_TO_RESOURCE = {
    "ü™µ": "–î–µ—Ä–µ–≤–æ",
    "ü™®": "–ö–∞–º–µ–Ω—å",
    "üçû": "–ü—Ä–æ–≤–∏–∑–∏—è",
    "üê¥": "–õ–æ—à–∞–¥–∏"
}


def parse_market_message(text: str) -> Optional[Dict[str, Dict[str, Any]]]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å resource -> {buy, sell, quantity}
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞:
      –î–µ—Ä–µ–≤–æ: 96,342,449ü™µ
      üìâ–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å: 8.31/6.80üí∞
    """
    if not isinstance(text, str):
        return None

    lines = [line.strip() for line in text.strip().split('\n') if line.strip()]
    resources = {}
    current_resource = None
    current_quantity = 0

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Ä–µ—Å—É—Ä—Å–∞: "–ù–∞–∑–≤–∞–Ω–∏–µ: —á–∏—Å–ª–æ –≠–º–æ–¥–∑–∏"
    resource_pattern = r"^(.+?):\s*([0-9,]*)\s*([ü™µü™®üçûüê¥])$"
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ü–µ–Ω: "–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å: 8.31/6.80"
    price_pattern = r"(?:[üìàüìâ]?\s*)?–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å:\s*([0-9]+(?:[.,][0-9]+)?)\s*/\s*([0-9]+(?:[.,][0-9]+)?)"

    for i, line in enumerate(lines):
        if line == "üé™ –†—ã–Ω–æ–∫":
            continue

        res_match = re.match(resource_pattern, line)
        if res_match:
            name_part = res_match.group(1).strip()
            qty_str = res_match.group(2).replace(',', '').strip()
            emoji = res_match.group(3)

            current_resource = EMOJI_TO_RESOURCE.get(emoji, name_part)
            current_quantity = int(qty_str) if qty_str.isdigit() else 0
            continue

        price_match = re.search(price_pattern, line)
        if price_match and current_resource:
            try:
                buy_price = float(price_match.group(1).replace(',', '.'))
                sell_price = float(price_match.group(2).replace(',', '.'))
                resources[current_resource] = {
                    "buy": buy_price,
                    "sell": sell_price,
                    "quantity": current_quantity
                }
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {current_resource} ‚Äî buy={buy_price}, sell={sell_price}, qty={current_quantity}")
                current_resource = None
                current_quantity = 0
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω: {e}")
                continue

    if not resources:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –≤ —Ç–µ–∫—Å—Ç–µ.")
        return None

    return resources


def handle_market_forward(bot, message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä—ã–Ω–∫–æ–º.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤ —É –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ä–≤–∞—Ä–¥ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å),
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç "—Å—ã—Ä—ã–µ" —Ü–µ–Ω—ã –≤ –ë–î.
    """
    try:
        # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ forward_from –∏ forward_sender_name
        forward_from = getattr(message, "forward_from", None)
        forward_sender_name = getattr(message, "forward_sender_name", None)

        if not forward_from and not forward_sender_name:
            bot.reply_to(message, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –æ—Ç –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –æ—Ç –±–æ—Ç–∞ —Ä—ã–Ω–∫–∞.")
            return

        # –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: text –∏ date
        text = getattr(message, "text", "") or ""
        msg_date = getattr(message, "date", None)
        timestamp = int(msg_date) if msg_date else int(time.time())

        # –ª–æ–≥–∏—Ä—É–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ ‚Äî –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞—Ç—Ä–∏–±—É—Ç–∞–º
        if forward_from:
            f_username = getattr(forward_from, "username", None)
            f_id = getattr(forward_from, "id", None)
            forward_info = f"username={f_username or 'n/a'} id={f_id or 'n/a'}"
        else:
            forward_info = f"forward_sender_name={forward_sender_name}"

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–≤–∞—Ä–¥–∞: {forward_info} (date: {msg_date})")

        parsed = parse_market_message(text)
        if not parsed:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –µ–≥–æ –±–æ–Ω—É—Å
        forwarder_id = getattr(forward_from, "id", None) if forward_from else None
        forwarder_bonus = get_user_bonus(forwarder_id) if forwarder_id else 0.0

        saved = 0
        for resource, info in parsed.items():
            buy = float(info.get("buy", 0.0))
            sell = float(info.get("sell", 0.0))
            qty = int(info.get("quantity", 0) or 0)

            # –ï—Å–ª–∏ —Ñ–æ—Ä–≤–∞—Ä–¥ –ø—Ä–∏—Å–ª–∞–ª –∏–≥—Ä–æ–∫ —Å –±–æ–Ω—É—Å–æ–º, —Ç–æ –µ–≥–æ —Ü–µ–Ω—ã ‚Äî —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã.
            # –ù–∞–¥–æ –≤–µ—Ä–Ω—É—Ç—å "—Å—ã—Ä—ã–µ" —Ü–µ–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
            if forwarder_bonus and forwarder_bonus > 0:
                # forwarder_bonus ‚Äî –¥—Ä–æ–±–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.22)
                raw_buy = buy * (1 + forwarder_bonus)
                raw_sell = sell / (1 + forwarder_bonus)
            else:
                raw_buy = buy
                raw_sell = sell

            date_iso = datetime.fromtimestamp(timestamp).isoformat()
            try:
                insert_market_record(resource, raw_buy, raw_sell, qty, timestamp, date_iso, forwarder_id)
                saved += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä—ã–Ω–∫–∞ –¥–ª—è {resource}: {e}")

        if saved > 0:
            bot.reply_to(message, f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} –∑–∞–ø–∏—Å–µ–π —Ä—ã–Ω–∫–∞ (—Å—ã—Ä—ã–µ —Ü–µ–Ω—ã).")
            # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ ‚Äî –∑–∞–ø—É—Å—Ç–∏–º –ø–µ—Ä–µ—Å—á—ë—Ç —Ç–∞–π–º–µ—Ä–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å alerts)
            try:
                import alerts
                # update_dynamic_timers_once –æ–∂–∏–¥–∞–µ—Ç bot –≤ –Ω–∞—à–µ–º –Ω–∞–±–æ—Ä–µ –º–æ–¥—É–ª–µ–π
                threading.Thread(target=alerts.update_dynamic_timers_once, args=(bot,), daemon=True).start()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Å—á—ë—Ç —Ç–∞–π–º–µ—Ä–æ–≤: {e}")
        else:
            bot.reply_to(message, "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    except Exception as ex:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_market_forward")
        try:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∞: {ex}")
        except Exception:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
